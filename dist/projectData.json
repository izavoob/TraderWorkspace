{
  "src/App.jsx": "import React from 'react';\r\nimport { Routes, Route, useLocation, useNavigate } from 'react-router-dom';\r\nimport Home from './components/Home.jsx';\r\nimport TradeJournal from './components/TradeJournal.jsx';\r\nimport TradeDetail from './components/TradeDetail.jsx';\r\nimport Placeholder from './components/Placeholder.jsx';\r\nimport CreateTrade from './components/CreateTrade.jsx';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body, html {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: #1a1a1a;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nconst AppContainer = styled.div`\r\n  text-align: center;\r\n  position: relative;\r\n  background-color: #1a1a1a;\r\n  color: #fff;\r\n  margin: 0;\r\n  padding: 20px;\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst NavigationButtons = styled.div`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &.hidden {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst NavButton = styled.button`\r\n  background-color: #5e2ca5;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 6px 10px;\r\n  margin: 0;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 38px;\r\n  height: 38px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: transform 0.2s ease, background-color 0.2s ease;\r\n\r\n  &.back {\r\n    border-right: 2px solid #4a1a8d;\r\n  }\r\n\r\n  &.forward {\r\n    margin-left: '-2px';\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #4a1a8d;\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n\r\n  &:before {\r\n    font-size: 20px;\r\n  }\r\n\r\n  &.back::before {\r\n    content: '\\2190';\r\n  }\r\n\r\n  &.forward::before {\r\n    content: '\\2192';\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const isHome = location.pathname === '/';\r\n  const navigate = useNavigate();\r\n\r\n  const handleBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  const handleForward = () => {\r\n    navigate(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <AppContainer>\r\n        {!isHome && <h2 style={{ color: '#5e2ca5' }}>{getSectionTitle(location.pathname)}</h2>}\r\n        <NavigationButtons className={isHome ? 'hidden' : ''}>\r\n          <NavButton onClick={handleBack} className=\"back\" aria-label=\"Back\" />\r\n          <NavButton onClick={handleForward} className=\"forward\" aria-label=\"Forward\" />\r\n        </NavigationButtons>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} />\r\n          <Route path=\"/trade-journal\" element={<TradeJournal />} />\r\n          <Route path=\"/trade/:id\" element={<TradeDetail />} />\r\n          <Route path=\"/create-trade\" element={<CreateTrade />} />\r\n          <Route path=\"/daily-routine\" element={<Placeholder title=\"Daily Routine\" />} />\r\n          <Route path=\"/performance-analysis\" element={<Placeholder title=\"Performance Analysis\" />} />\r\n          <Route path=\"/statistics\" element={<Placeholder title=\"Statistics\" />} />\r\n          <Route path=\"/risk-management\" element={<Placeholder title=\"Risk Management\" />} />\r\n          <Route path=\"/learning-section\" element={<Placeholder title=\"Learning Section\" />} />\r\n          <Route path=\"/reporting-system\" element={<Placeholder title=\"Reporting System\" />} />\r\n          <Route path=\"/settings\" element={<Placeholder title=\"Settings\" />} />\r\n        </Routes>\r\n      </AppContainer>\r\n    </>\r\n  );\r\n}\r\n\r\n// Функція для отримання назви секції\r\nfunction getSectionTitle(path) {\r\n  switch (path) {\r\n    case '/#daily-routine':\r\n      return 'DAILY ROUTINE';\r\n    case '/#performance-analysis':\r\n      return 'PERFORMANCE ANALYSIS';\r\n    case '/#statistics':\r\n      return 'STATISTICS';\r\n    case '/#risk-management':\r\n      return 'RISK MANAGEMENT';\r\n    case '/#learning-section':\r\n      return 'LEARNING SECTION';\r\n    case '/#reporting-system':\r\n      return 'REPORTING SYSTEM';\r\n    case '/#settings':\r\n      return 'SETTINGS';\r\n    case '/#trade/:id':\r\n      return 'TRADE DETAIL';\r\n    case '/#create-trade':\r\n      return 'CREATE TRADE';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport default App;",
  "src/components/CreateTrade.jsx": "import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst CreateTradeContainer = styled.div`\r\n  max-width: 1820px;\r\n  margin: 20px auto;\r\n  min-height: 100vh;\r\n  background-color: #1a1a1a;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425c9, #b886ee);\r\n  padding: 20px 0;\r\n  border-radius: 10px 10px 0 0;\r\n  color: #fff;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px;\r\n  min-height: 6.67vh;\r\n  max-height: 128px;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425c9, #b886ee);\r\n  border: none;\r\n  padding: 0;\r\n  width: 200px;\r\n  height: 100%;\r\n  border-radius: 0;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  opacity: 0;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.98);\r\n  }\r\n\r\n  &:before {\r\n    content: 'Back';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 1.2em;\r\n    color: rgba(255, 255, 255, 0);\r\n    transition: color 0.3s ease;\r\n  }\r\n\r\n  &:hover:before {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0 auto;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 1;\r\n`;\r\n\r\nconst TradeNumber = styled.p`\r\n  color: #fff;\r\n  font-size: 1.2em;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst TradeContent = styled.div`\r\n  margin-top: 148px;\r\n  padding-top: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-height: calc(100vh - 168px);\r\n`;\r\n\r\nconst TablesContainer = styled.div`\r\n  display: flex;\r\n  gap: 20px;\r\n  width: 100%;\r\n`;\r\n\r\nconst TradeTable = styled.div`\r\n  flex: 1;\r\n  background-color: #2e2e2e;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  border: 2px solid #5e2ca5;\r\n`;\r\n\r\nconst FormRow = styled.div`\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nconst FormField = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst FormLabel = styled.label`\r\n  color: #fff;\r\n  margin-bottom: 5px;\r\n  display: block;\r\n`;\r\n\r\nconst FormInput = styled.input`\r\n  padding: 8px;\r\n  background-color: #3e3e3e;\r\n  color: #fff;\r\n  border: 1px solid #5e2ca5;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n`;\r\n\r\nconst FormSelect = styled.select`\r\n  padding: 8px;\r\n  background-color: #3e3e3e;\r\n  color: #fff;\r\n  border: 1px solid #5e2ca5;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n`;\r\n\r\nconst FormCheckbox = styled.input`\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst FormButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425c9, #b886ee);\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n  min-width: 120px;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    opacity: 0.9;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst ButtonGroup = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: flex-end;\r\n  margin-top: 20px;\r\n  width: 100%;\r\n`;\r\n\r\nconst VolumeConfirmationContainer = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst VolumeConfirmationButton = styled.button`\r\n  padding: 8px;\r\n  background-color: #3e3e3e;\r\n  color: #fff;\r\n  border: 1px solid #5e2ca5;\r\n  border-radius: 5px;\r\n  width: 100%;\r\n  text-align: left;\r\n`;\r\n\r\nconst VolumeConfirmationPopup = styled.div`\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  background-color: #3e3e3e;\r\n  border: 1px solid #5e2ca5;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst VolumeOption = styled.div`\r\n  padding: 5px;\r\n  cursor: pointer;\r\n  background-color: ${(props) => (props.selected ? 'rgba(0, 0, 255, 0.5)' : 'transparent')}; // Синій із 50% прозорістю\r\n  color: #fff;\r\n\r\n  &:hover {\r\n    background-color: #5e2ca5;\r\n  }\r\n`;\r\n\r\nconst ConfirmButton = styled.button`\r\n  margin-top: 10px;\r\n  background: conic-gradient(from 45deg, #7425c9, #b886ee);\r\n  color: #fff;\r\n  border: none;\r\n  padding: 5px 10px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n`;\r\n\r\nfunction CreateTrade() {\r\n  const navigate = useNavigate();\r\n  const [tradeCount, setTradeCount] = useState(0);\r\n  const [trade, setTrade] = useState({\r\n    date: new Date().toISOString().split('T')[0],\r\n    account: '',\r\n    pair: '',\r\n    direction: '',\r\n    positionType: '',\r\n    risk: '',\r\n    result: '',\r\n    rr: '',\r\n    profitLoss: '',\r\n    gainedPoints: '',\r\n    followingPlan: false,\r\n    bestTrade: false,\r\n    session: '',\r\n    pointA: '',\r\n    trigger: '',\r\n    volumeConfirmation: [],\r\n    entryModel: '',\r\n    entryTF: '',\r\n    fta: '',\r\n    slPosition: '',\r\n    score: '',\r\n    category: '',\r\n  });\r\n  const [showVolumePopup, setShowVolumePopup] = useState(false);\r\n  const [tempVolumeConfirmation, setTempVolumeConfirmation] = useState([]);\r\n\r\n  useEffect(() => {\r\n    window.electronAPI.getTrades().then((trades) => {\r\n      setTradeCount(trades.length + 1);\r\n    }).catch((error) => {\r\n      console.error('Error fetching trade count:', error);\r\n      setTradeCount(1);\r\n    });\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setTrade((prev) => {\r\n      const newTrade = { ...prev, [name]: type === 'checkbox' ? checked : value };\r\n      if (name === 'rr' || name === 'risk' || name === 'result') {\r\n        const risk = parseFloat(newTrade.risk) || 0;\r\n        const rr = parseFloat(newTrade.rr) || 0;\r\n        newTrade.profitLoss =\r\n          newTrade.result === 'Win' ? risk * rr : newTrade.result === 'Loss' ? -risk : '';\r\n        newTrade.gainedPoints = 'Coming soon';\r\n      }\r\n      return newTrade;\r\n    });\r\n  };\r\n\r\n  const handleVolumeOptionClick = (option) => {\r\n    setTempVolumeConfirmation((prev) =>\r\n      prev.includes(option) ? prev.filter((item) => item !== option) : [...prev, option]\r\n    );\r\n  };\r\n\r\n  const handleVolumeConfirm = () => {\r\n    setTrade((prev) => ({ ...prev, volumeConfirmation: tempVolumeConfirmation }));\r\n    setShowVolumePopup(false);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const tradeData = {\r\n        id: Date.now().toString(),\r\n        ...trade,\r\n        risk: trade.risk ? `${trade.risk}%` : '',\r\n        rr: trade.rr ? `${trade.rr}RR` : '',\r\n        volumeConfirmation: trade.volumeConfirmation.join(', '),\r\n      };\r\n      await window.electronAPI.saveTrade(tradeData);\r\n      navigate('/trade-journal');\r\n    } catch (error) {\r\n      console.error('Error saving trade:', error);\r\n      alert('Failed to save trade. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate('/trade-journal');\r\n  };\r\n\r\n  return (\r\n    <CreateTradeContainer>\r\n      <Header>\r\n        <BackButton onClick={handleBack} />\r\n        <Title>New Trade</Title>\r\n      </Header>\r\n      <TradeContent>\r\n        <TradeNumber>Trade number: {tradeCount}</TradeNumber>\r\n        <TablesContainer>\r\n          <TradeTable>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>Date</FormLabel>\r\n                <FormInput\r\n                  type=\"date\"\r\n                  name=\"date\"\r\n                  value={trade.date}\r\n                  onChange={handleChange}\r\n                />\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Account</FormLabel>\r\n                <FormSelect name=\"account\" value={trade.account} onChange={handleChange} disabled>\r\n                  <option value=\"\">Coming soon</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Pair</FormLabel>\r\n                <FormSelect name=\"pair\" value={trade.pair} onChange={handleChange}>\r\n                  <option value=\"\">Select Pair</option>\r\n                  <option value=\"EURUSD\">EURUSD</option>\r\n                  <option value=\"GBPUSD\">GBPUSD</option>\r\n                  <option value=\"USDJPY\">USDJPY</option>\r\n                  <option value=\"GER40\">GER40</option>\r\n                  <option value=\"XAUUSD\">XAUUSD</option>\r\n                  <option value=\"XAGUSD\">XAGUSD</option>\r\n                </FormSelect>\r\n              </FormField>\r\n            </FormRow>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>Direction</FormLabel>\r\n                <FormSelect name=\"direction\" value={trade.direction} onChange={handleChange}>\r\n                  <option value=\"\">Select Direction</option>\r\n                  <option value=\"Long\" style={{ backgroundColor: '#00ff00', color: '#000' }}>Long</option>\r\n                  <option value=\"Short\" style={{ backgroundColor: '#ff0000', color: '#fff' }}>Short</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Position Type</FormLabel>\r\n                <FormSelect name=\"positionType\" value={trade.positionType} onChange={handleChange}>\r\n                  <option value=\"\">Select Position Type</option>\r\n                  <option value=\"Intraday\">Intraday</option>\r\n                  <option value=\"Swing\">Swing</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Risk, %</FormLabel>\r\n                <FormInput\r\n                  type=\"number\"\r\n                  name=\"risk\"\r\n                  value={trade.risk}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Enter risk\"\r\n                  step=\"0.01\"\r\n                />\r\n              </FormField>\r\n            </FormRow>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>Result</FormLabel>\r\n                <FormSelect name=\"result\" value={trade.result} onChange={handleChange}>\r\n                  <option value=\"\">Select Result</option>\r\n                  <option value=\"Win\" style={{ backgroundColor: '#00ff00', color: '#000' }}>Win</option>\r\n                  <option value=\"Loss\" style={{ backgroundColor: '#ff0000', color: '#fff' }}>Loss</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>RR</FormLabel>\r\n                <FormInput\r\n                  type=\"number\"\r\n                  name=\"rr\"\r\n                  value={trade.rr}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Enter RR\"\r\n                  step=\"0.01\"\r\n                />\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Profit (%)</FormLabel>\r\n                <FormInput\r\n                  type=\"text\"\r\n                  name=\"profitLoss\"\r\n                  value={trade.profitLoss}\r\n                  readOnly\r\n                />\r\n              </FormField>\r\n            </FormRow>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>Profit ($)</FormLabel>\r\n                <FormInput\r\n                  type=\"text\"\r\n                  name=\"gainedPoints\"\r\n                  value={trade.gainedPoints || 'Coming soon'}\r\n                  readOnly\r\n                />\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>\r\n                  <FormCheckbox\r\n                    type=\"checkbox\"\r\n                    name=\"followingPlan\"\r\n                    checked={trade.followingPlan}\r\n                    onChange={handleChange}\r\n                  />\r\n                  Following the Plan?\r\n                </FormLabel>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>\r\n                  <FormCheckbox\r\n                    type=\"checkbox\"\r\n                    name=\"bestTrade\"\r\n                    checked={trade.bestTrade}\r\n                    onChange={handleChange}\r\n                  />\r\n                  Best Trade?\r\n                </FormLabel>\r\n              </FormField>\r\n            </FormRow>\r\n          </TradeTable>\r\n          <TradeTable>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>Session</FormLabel>\r\n                <FormSelect name=\"session\" value={trade.session} onChange={handleChange}>\r\n                  <option value=\"\">Select Session</option>\r\n                  <option value=\"Asia\" style={{ backgroundColor: '#0000ff', color: '#fff' }}>Asia</option>\r\n                  <option value=\"Frankfurt\" style={{ backgroundColor: '#ff69b4', color: '#fff' }}>Frankfurt</option>\r\n                  <option value=\"London\" style={{ backgroundColor: '#00ff00', color: '#000' }}>London</option>\r\n                  <option value=\"New York\" style={{ backgroundColor: '#ffa500', color: '#fff' }}>New York</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Point A</FormLabel>\r\n                <FormSelect name=\"pointA\" value={trade.pointA} onChange={handleChange}>\r\n                  <option value=\"\">Select Point A</option>\r\n                  <option value=\"Fractal Raid\">Fractal Raid</option>\r\n                  <option value=\"FVG\">FVG</option>\r\n                  <option value=\"SNR\">SNR</option>\r\n                  <option value=\"RB\">RB</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Trigger</FormLabel>\r\n                <FormSelect name=\"trigger\" value={trade.trigger} onChange={handleChange}>\r\n                  <option value=\"\">Select Trigger</option>\r\n                  <option value=\"Fractal Swing\">Fractal Swing</option>\r\n                  <option value=\"FVG\">FVG</option>\r\n                  <option value=\"Fractal Swing + FVG\">Fractal Swing + FVG</option>\r\n                </FormSelect>\r\n              </FormField>\r\n            </FormRow>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>Volume Confirmation</FormLabel>\r\n                <VolumeConfirmationContainer>\r\n                  <VolumeConfirmationButton onClick={() => setShowVolumePopup(true)}>\r\n                    {trade.volumeConfirmation.length > 0 ? trade.volumeConfirmation.join(', ') : 'Select'}\r\n                  </VolumeConfirmationButton>\r\n                  {showVolumePopup && (\r\n                    <VolumeConfirmationPopup>\r\n                      {['Inversion', 'FVG', 'SNR'].map((option) => (\r\n                        <VolumeOption\r\n                          key={option}\r\n                          selected={tempVolumeConfirmation.includes(option)}\r\n                          onClick={() => handleVolumeOptionClick(option)}\r\n                        >\r\n                          {option}\r\n                        </VolumeOption>\r\n                      ))}\r\n                      <ConfirmButton onClick={handleVolumeConfirm}>Confirm</ConfirmButton>\r\n                    </VolumeConfirmationPopup>\r\n                  )}\r\n                </VolumeConfirmationContainer>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Entry Model</FormLabel>\r\n                <FormSelect name=\"entryModel\" value={trade.entryModel} onChange={handleChange}>\r\n                  <option value=\"\">Select Entry Model</option>\r\n                  <option value=\"Inversion\">Inversion</option>\r\n                  <option value=\"Displacement\">Displacement</option>\r\n                  <option value=\"SNR\">SNR</option>\r\n                  <option value=\"IDM\">IDM</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Entry TF</FormLabel>\r\n                <FormSelect name=\"entryTF\" value={trade.entryTF} onChange={handleChange}>\r\n                  <option value=\"\">Select Entry TF</option>\r\n                  <option value=\"3m\">3m</option>\r\n                  <option value=\"5m\">5m</option>\r\n                  <option value=\"15m\">15m</option>\r\n                  <option value=\"1h/30m\">1h/30m</option>\r\n                  <option value=\"4h\">4h</option>\r\n                </FormSelect>\r\n              </FormField>\r\n            </FormRow>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>FTA</FormLabel>\r\n                <FormSelect name=\"fta\" value={trade.fta} onChange={handleChange}>\r\n                  <option value=\"\">Select FTA</option>\r\n                  <option value=\"Fractal Swing\">Fractal Swing</option>\r\n                  <option value=\"FVG\">FVG</option>\r\n                  <option value=\"SNR\">SNR</option>\r\n                  <option value=\"RB\">RB</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>SL Position</FormLabel>\r\n                <FormSelect name=\"slPosition\" value={trade.slPosition} onChange={handleChange}>\r\n                  <option value=\"\">Select SL Position</option>\r\n                  <option value=\"LTF/Lunch Manipulation\">LTF/Lunch Manipulation</option>\r\n                  <option value=\"30m Raid\">30m Raid</option>\r\n                  <option value=\"1h Raid\">1h Raid</option>\r\n                  <option value=\"4h Raid\">4h Raid</option>\r\n                  <option value=\"1D Raid\">1D Raid</option>\r\n                </FormSelect>\r\n              </FormField>\r\n              <FormField>\r\n                <FormLabel>Score</FormLabel>\r\n                <FormInput\r\n                  type=\"number\"\r\n                  name=\"score\"\r\n                  value={trade.score}\r\n                  onChange={handleChange}\r\n                  placeholder=\"Enter score\"\r\n                />\r\n              </FormField>\r\n            </FormRow>\r\n            <FormRow>\r\n              <FormField>\r\n                <FormLabel>Category</FormLabel>\r\n                <FormInput\r\n                  type=\"text\"\r\n                  name=\"category\"\r\n                  value={trade.category || 'Coming soon'}\r\n                  readOnly\r\n                />\r\n              </FormField>\r\n            </FormRow>\r\n          </TradeTable>\r\n        </TablesContainer>\r\n        <ButtonGroup>\r\n          <FormButton type=\"submit\" onClick={handleSubmit}>\r\n            Save Trade\r\n          </FormButton>\r\n          <FormButton type=\"button\" onClick={handleBack}>\r\n            Cancel\r\n          </FormButton>\r\n        </ButtonGroup>\r\n      </TradeContent>\r\n    </CreateTradeContainer>\r\n  );\r\n}\r\n\r\nexport default CreateTrade;",
  "src/components/GalleryItem.jsx": "import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst GalleryItemStyled = styled(Link)`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border-radius: 20px; /* Збільшено заокруглення для більших кнопок */\r\n  height: 250px; /* Збільшено висоту для 1920x1080 */\r\n  width: 400px; /* Збільшено ширину для 1920x1080, щоб займати більше простору */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center; /* Центрування по висоті */\r\n  align-items: center; /* Центрування по ширині */\r\n  text-decoration: none;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); /* Збільшено тінь для більших кнопок */\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    opacity: 0.9;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst ItemTitle = styled.h3`\r\n  margin: 0;\r\n  font-size: 2em; /* Збільшено розмір тексту для більших кнопок */\r\n`;\r\n\r\nconst ItemDescription = styled.p`\r\n  margin: 15px 0 0; /* Збільшено відступ для більших кнопок */\r\n  font-size: 1.1em; /* Збільшено розмір опису */\r\n  color: #e0e0e0;\r\n`;\r\n\r\nfunction GalleryItem({ title, path, description }) {\r\n  return (\r\n    <GalleryItemStyled to={path}>\r\n      <ItemTitle>{title}</ItemTitle>\r\n      <ItemDescription>{description}</ItemDescription>\r\n    </GalleryItemStyled>\r\n  );\r\n}\r\n\r\nexport default GalleryItem;",
  "src/components/Placeholder.jsx": "import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PlaceholderContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 20px auto;\r\n  min-height: 100vh; /* Розтягуємо фон на всю висоту */\r\n  background-color: #1a1a1a; /* Темний фон */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n`;\r\n\r\nconst PlaceholderTitle = styled.h2`\r\n  color: #5e2ca5;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nfunction Placeholder({ title }) {\r\n  return (\r\n    <PlaceholderContainer>\r\n      <PlaceholderTitle>{title}</PlaceholderTitle>\r\n      <p>Coming soon</p>\r\n    </PlaceholderContainer>\r\n  );\r\n}\r\n\r\nexport default Placeholder;",
  "src/components/TradeDetail.jsx": "import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TradeDetailContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 20px auto;\r\n  min-height: 100vh; /* Розтягуємо фон на всю висоту */\r\n  background-color: #1a1a1a; /* Темний фон */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n`;\r\n\r\nconst TradeDetailTitle = styled.h2`\r\n  color: #5e2ca5;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nfunction TradeDetail() {\r\n  return (\r\n    <TradeDetailContainer>\r\n      <TradeDetailTitle>Trade Detail (Coming soon)</TradeDetailTitle>\r\n      <p>This is a placeholder for the trade details page.</p>\r\n    </TradeDetailContainer>\r\n  );\r\n}\r\n\r\nexport default TradeDetail;",
  "src/components/TradeJournal.jsx": "import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTable } from 'react-table';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body, html {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: #1a1a1a;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nconst TradeJournalContainer = styled.div`\r\n  max-width: 1820px;\r\n  margin: 20px auto;\r\n  min-height: 100vh;\r\n  background-color: #1a1a1a;\r\n  padding: 20px;\r\n  position: relative;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  padding: 20px 0;\r\n  border-radius: 10px 10px 0 0;\r\n  color: #fff;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px;\r\n  min-height: 6.67vh;\r\n  max-height: 128px;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: none;\r\n  padding: 0;\r\n  width: 200px;\r\n  height: 100%;\r\n  border-radius: 0;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  opacity: 0;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.98);\r\n  }\r\n\r\n  &:before {\r\n    content: 'Back';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 1.2em;\r\n    color: rgba(255, 255, 255, 0);\r\n    transition: color 0.3s ease;\r\n  }\r\n\r\n  &:hover:before {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0 auto;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 1;\r\n`;\r\n\r\nconst JournalContent = styled.div`\r\n  margin-top: 168px;\r\n  padding-top: 20px;\r\n`;\r\n\r\nconst JournalHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst ButtonGroup = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: center;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  background: ${(props) =>\r\n    props.primary ? 'conic-gradient(from 45deg, #7425C9, #B886EE)' : '#5C9DF5'};\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  height: 40px;\r\n  width: ${(props) => (props.primary ? '240px' : 'auto')};\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    opacity: 0.9;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst TradeTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: #2e2e2e;\r\n  border: 2px solid #5e2ca5;\r\n`;\r\n\r\nconst TableHeader = styled.th`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: 1px solid #5e2ca5;\r\n  padding: 12px;\r\n  text-align: left;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  border: 1px solid #5e2ca5;\r\n  padding: 10px;\r\n  text-align: left;\r\n  color: #fff;\r\n  background-color: #2e2e2e;\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n  &:nth-child(even) {\r\n    background-color: #2e2e2e;\r\n  }\r\n  &:nth-child(odd) {\r\n    background-color: #3e3e3e;\r\n  }\r\n`;\r\n\r\nconst IconButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n\r\n  &:hover {\r\n    filter: brightness(1.5);\r\n  }\r\n\r\n  img {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n`;\r\n\r\nconst ButtonsContainer = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease;\r\n\r\n  .table-row:hover & {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst Popup = styled.div`\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: #2e2e2e;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  border: 2px solid #5e2ca5;\r\n  color: #fff;\r\n  z-index: 1001;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst PopupButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  margin: 5px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nfunction TradeJournal() {\r\n  const [trades, setTrades] = useState([]);\r\n  const [filter] = useState('all'); // За замовчуванням усі трейди\r\n  const [deletePopup, setDeletePopup] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadTrades = async () => {\r\n      try {\r\n        const loadedTrades = await window.electronAPI.getTrades();\r\n        setTrades(loadedTrades || []);\r\n      } catch (error) {\r\n        console.error('Error loading trades:', error);\r\n        setTrades([]);\r\n      }\r\n    };\r\n    loadTrades();\r\n  }, []);\r\n\r\n  const filteredTrades = React.useMemo(() => {\r\n    const now = new Date();\r\n    return trades.filter((trade) => {\r\n      const tradeDate = new Date(trade.date);\r\n      if (filter === 'week') {\r\n        const weekStart = new Date(now.setDate(now.getDate() - now.getDay()));\r\n        return tradeDate >= weekStart && tradeDate <= now;\r\n      } else if (filter === 'month') {\r\n        return (\r\n          tradeDate.getMonth() === now.getMonth() &&\r\n          tradeDate.getFullYear() === now.getFullYear()\r\n        );\r\n      } else if (filter === 'all') {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }, [trades, filter]);\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      { Header: 'No.', accessor: (row, i) => i + 1, width: 20 },\r\n      { Header: 'Date', accessor: 'date', width: 129 },\r\n      { Header: 'Pair', accessor: 'pair', width: 129 },\r\n      { Header: 'Session', accessor: 'session', width: 110 },\r\n      { Header: 'Direction', accessor: 'direction', width: 110 },\r\n      { Header: 'Result', accessor: 'result', width: 110 },\r\n      { Header: 'Category', accessor: 'tradeClass', width: 90 },\r\n      { Header: 'Profit in %', accessor: 'profitLoss', Cell: ({ value }) => `${value}%`, width: 90 },\r\n      { Header: 'Profit in $', accessor: 'gainedPoints', Cell: ({ value }) => `$${value}`, width: 90 },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: filteredTrades });\r\n\r\n  const handleTradeClick = (tradeId) => {\r\n    navigate(`/trade/${tradeId}`);\r\n  };\r\n\r\n  const handleAddTrade = () => {\r\n    navigate('/create-trade');\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  const handleEdit = (tradeId) => {\r\n    navigate(`/trade/${tradeId}`);\r\n  };\r\n\r\n  const handleDelete = async (tradeId) => {\r\n    try {\r\n      await window.electronAPI.deleteTrade(tradeId);\r\n      setTrades(trades.filter((trade) => trade.id !== tradeId));\r\n      setDeletePopup(null);\r\n    } catch (error) {\r\n      console.error('Error deleting trade:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <TradeJournalContainer>\r\n        <Header>\r\n          <BackButton onClick={handleBack} />\r\n          <Title>Trading Journal</Title>\r\n        </Header>\r\n        <JournalContent>\r\n          <JournalHeader>\r\n            <ButtonGroup>\r\n              <ActionButton primary onClick={handleAddTrade}>Add new Trade</ActionButton>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n              <ActionButton onClick={() => setFilter('week')}>Range</ActionButton>\r\n              <ActionButton onClick={() => setFilter('month')}>Filter</ActionButton>\r\n            </ButtonGroup>\r\n          </JournalHeader>\r\n          <TradeTable {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map((column) => (\r\n                    <TableHeader {...column.getHeaderProps()} style={{ width: `${column.width}px` }}>\r\n                      {column.render('Header')}\r\n                    </TableHeader>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {rows.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={columns.length} style={{ textAlign: 'center' }}>\r\n                    No trades yet\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                rows.map((row) => {\r\n                  prepareRow(row);\r\n                  return (\r\n                    <TableRow className=\"table-row\" {...row.getRowProps()}>\r\n                      {row.cells.map((cell) => (\r\n                        <TableCell {...cell.getCellProps()} style={{ width: `${cell.column.width}px` }}>\r\n                          {cell.column.Header === 'No.' ? (\r\n                            <Link to={`/trade/${row.original.id}`} style={{ color: '#fff', textDecoration: 'none' }}>\r\n                              {cell.render('Cell')}\r\n                            </Link>\r\n                          ) : (\r\n                            cell.render('Cell')\r\n                          )}\r\n                        </TableCell>\r\n                      ))}\r\n                      <TableCell>\r\n                        <ButtonsContainer>\r\n                          <IconButton onClick={() => handleEdit(row.original.id)}>\r\n                            <img src={'/edit-icon.svg'} alt=\"Edit\" />\r\n                          </IconButton>\r\n                          <IconButton onClick={() => setDeletePopup(row.original.id)}>\r\n                            <img src={'/delete-icon.svg'} alt=\"Delete\" />\r\n                          </IconButton>\r\n                        </ButtonsContainer>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })\r\n              )}\r\n            </tbody>\r\n          </TradeTable>\r\n          {deletePopup && (\r\n            <Popup>\r\n              <p>Want to delete?</p>\r\n              <PopupButton onClick={() => handleDelete(deletePopup)}>Yes</PopupButton>\r\n              <PopupButton onClick={() => setDeletePopup(null)}>No</PopupButton>\r\n            </Popup>\r\n          )}\r\n        </JournalContent>\r\n      </TradeJournalContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TradeJournal;",
  "src/components/TradeTableComponent.jsx": "import React from 'react';\r\nimport { useTable } from 'react-table';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst TradeTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: #2e2e2e;\r\n  border: 2px solid #5e2ca5;\r\n`;\r\n\r\nconst TableHeader = styled.th`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: 1px solid #5e2ca5;\r\n  padding: 12px;\r\n  text-align: left;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  border: 1px solid #5e2ca5;\r\n  padding: 10px;\r\n  text-align: left;\r\n  color: #fff;\r\n  background-color: #2e2e2e;\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n  &:nth-child(even) {\r\n    background-color: #2e2e2e;\r\n  }\r\n  &:nth-child(odd) {\r\n    background-color: #3e3e3e;\r\n  }\r\n`;\r\n\r\nfunction TradeTableComponent({ columns, data, onRowClick }) {\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data });\r\n\r\n  return (\r\n    <TradeTable {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <TableHeader {...column.getHeaderProps()} style={{ width: `${column.width}px` }}>\r\n                {column.render('Header')}\r\n              </TableHeader>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.length === 0 ? (\r\n          <TableRow>\r\n            <TableCell colSpan={columns.length} style={{ textAlign: 'center' }}>\r\n              No trades yet\r\n            </TableCell>\r\n          </TableRow>\r\n        ) : (\r\n          rows.map((row) => {\r\n            prepareRow(row);\r\n            return (\r\n              <TableRow className=\"table-row\" {...row.getRowProps()}>\r\n                {row.cells.map((cell) => (\r\n                  <TableCell {...cell.getCellProps()} style={{ width: `${cell.column.width}px` }}>\r\n                    {cell.column.Header === 'No.' ? (\r\n                      <Link to={`/trade/${row.original.id}`} style={{ color: '#fff', textDecoration: 'none' }}>\r\n                        {cell.render('Cell')}\r\n                      </Link>\r\n                    ) : (\r\n                      cell.render('Cell')\r\n                    )}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            );\r\n          })\r\n        )}\r\n      </tbody>\r\n    </TradeTable>\r\n  );\r\n}\r\n\r\nexport default TradeTableComponent;",
  "src/components/ActionButtons.jsx": "import React from 'react';\r\nimport styled from 'styled-components';\r\nimport EditIcon from '../assets/icons/edit-icon.svg';\r\nimport DeleteIcon from '../assets/icons/delete-icon.svg';\r\n\r\nconst ButtonsContainer = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  opacity: 0;\r\n  transition: opacity 0.2s ease;\r\n\r\n  .table-row:hover & {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst IconButton = styled.button` /* Виправив помилку, додавши визначення IconButton */\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n\r\n  &:hover {\r\n    filter: brightness(1.5);\r\n  }\r\n\r\n  img {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n`;\r\n\r\nfunction ActionButtons({ tradeId, onEdit, onDelete }) {\r\n  return (\r\n    <ButtonsContainer>\r\n      <IconButton onClick={() => onEdit(tradeId)}>\r\n        <img src={EditIcon} alt=\"Edit\" />\r\n      </IconButton>\r\n      <IconButton onClick={() => onDelete(tradeId)}>\r\n        <img src={DeleteIcon} alt=\"Delete\" />\r\n      </IconButton>\r\n    </ButtonsContainer>\r\n  );\r\n}\r\n\r\nexport default ActionButtons;",
  "src/components/Home.jsx": "import React from 'react';\r\nimport GalleryItem from './GalleryItem.jsx';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  padding: 20px;\r\n  border-radius: 0 0 10px 10px; /* Заокруглення тільки нижніх кутів */\r\n  color: #fff;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px; /* Фіксована висота для екрану 1920x1080 */\r\n  min-height: 6.67vh; /* Адаптивність для менших екранів */\r\n  max-height: 128px; /* Обмеження максимальної висоти */\r\n`;\r\n\r\nconst Greeting = styled.h1`\r\n  margin: 0;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n`;\r\n\r\nconst WorkPhrase = styled.p`\r\n  color: #ff8c00;\r\n  margin-top: 10px;\r\n  font-size: 1.2em;\r\n`;\r\n\r\nconst Gallery = styled.div`\r\n  display: flex;\r\n  justify-content: center; /* Центрування по ширині */\r\n  align-items: center; /* Центрування по висоті */\r\n  flex-wrap: wrap; /* Дозволяє елементи переноситися, якщо екран малий */\r\n  gap: 30px; /* Збільшено відступ між кнопками для кращого вигляду */\r\n  margin-top: 168px; /* Зсув вниз, враховуючи висоту Header (128px) + padding 20px */\r\n  padding: 20px;\r\n  min-height: calc(100vh - 168px); /* Займає весь доступний простір під Header */\r\n  width: 100%; /* Займає всю ширину екрана */\r\n`;\r\n\r\nfunction Home() {\r\n  const galleryItems = [\r\n    { title: 'Trading Journal', path: '/trade-journal', description: 'Analyze your future trades in one place using our advanced tools and indicators.' },\r\n    { title: 'Daily Routine', path: '/daily-routine', description: 'Add your daily thoughts and plans.' },\r\n    { title: 'Performance Analysis', path: '/performance-analysis', description: 'Explore and improve your skills.' },\r\n    { title: 'Statistics', path: '/statistics', description: 'All information about your trading.' },\r\n    { title: 'Risk Management', path: '/risk-management', description: 'Save your deposit.' },\r\n    { title: 'Reporting System', path: '/reporting-system', description: 'Get detailed reports.' },\r\n    { title: 'Learning Section', path: '/learning-section', description: 'Learn new skills.' },\r\n    { title: 'Settings', path: '/settings', description: 'Make using app comfortable.' },\r\n  ];\r\n\r\n  const getGreeting = () => {\r\n    const hour = new Date().getHours();\r\n    if (hour >= 4 && hour < 11) return 'Good Morning!';\r\n    if (hour >= 11 && hour < 17) return 'Good Afternoon!';\r\n    return 'Good Evening!';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Greeting>{getGreeting()}</Greeting>\r\n        <WorkPhrase>Let's get to work!</WorkPhrase>\r\n      </Header>\r\n      <Gallery>\r\n        {galleryItems.map((item) => (\r\n          <GalleryItem key={item.path} title={item.title} path={item.path} description={item.description} />\r\n        ))}\r\n      </Gallery>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;",
  "src/components/Trash.jsx": "import React, { useState, useEffect } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst TrashContainer = styled.div`\r\n  max-width: 1820px;\r\n  margin: 20px auto;\r\n  min-height: 100vh;\r\n  background-color: #1a1a1a;\r\n  padding: 20px;\r\n  color: #fff;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  padding: 20px 0;\r\n  border-radius: 10px 10px 0 0;\r\n  color: #fff;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px;\r\n  min-height: 6.67vh;\r\n  max-height: 128px;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: none;\r\n  padding: 0;\r\n  width: 200px;\r\n  height: 100%;\r\n  border-radius: 0;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  opacity: 0;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.98);\r\n  }\r\n\r\n  &:before {\r\n    content: 'Back';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 1.2em;\r\n    color: rgba(255, 255, 255, 0);\r\n    transition: color 0.3s ease;\r\n  }\r\n\r\n  &:hover:before {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0 auto;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 1;\r\n`;\r\n\r\nconst TrashContent = styled.div`\r\n  margin-top: 168px;\r\n  padding-top: 20px;\r\n`;\r\n\r\nconst TrashTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: #2e2e2e;\r\n  border: 2px solid #5e2ca5;\r\n`;\r\n\r\nconst TableHeader = styled.th`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: 1px solid #5e2ca5;\r\n  padding: 12px;\r\n  text-align: left;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  border: 1px solid #5e2ca5;\r\n  padding: 10px;\r\n  text-align: left;\r\n  color: #fff;\r\n  background-color: #2e2e2e;\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n  &:nth-child(even) {\r\n    background-color: #2e2e2e;\r\n  }\r\n  &:nth-child(odd) {\r\n    background-color: #3e3e3e;\r\n  }\r\n`;\r\n\r\nconst ActionButtons = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    opacity: 0.9;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nfunction Trash() {\r\n  const [deletedTrades, setDeletedTrades] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadDeletedTrades = async () => {\r\n      try {\r\n        const loadedTrades = await window.electronAPI.getDeletedTrades();\r\n        setDeletedTrades(loadedTrades || []);\r\n      } catch (error) {\r\n        console.error('Error loading deleted trades:', error);\r\n        setDeletedTrades([]);\r\n      }\r\n    };\r\n    loadDeletedTrades();\r\n  }, []);\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      { Header: 'No.', accessor: (row, i) => i + 1, width: 20 },\r\n      { Header: 'Date', accessor: 'date', width: 129 },\r\n      { Header: 'Pair', accessor: 'pair', width: 129 },\r\n      { Header: 'Session', accessor: 'session', width: 110 },\r\n      { Header: 'Direction', accessor: 'direction', width: 110 },\r\n      { Header: 'Result', accessor: 'result', width: 110 },\r\n      { Header: 'Category', accessor: 'tradeClass', width: 90 },\r\n      { Header: 'Profit in %', accessor: 'profitLoss', Cell: ({ value }) => `${value}%`, width: 90 },\r\n      { Header: 'Profit in $', accessor: 'gainedPoints', Cell: ({ value }) => `$${value}`, width: 90 },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data: deletedTrades });\r\n\r\n  const handleBack = () => {\r\n    navigate('/settings'); // Повернення до Settings\r\n  };\r\n\r\n  const handleRestore = async (trade) => {\r\n    try {\r\n      await window.electronAPI.restoreTrade(trade);\r\n      setDeletedTrades(deletedTrades.filter((t) => t.id !== trade.id));\r\n    } catch (error) {\r\n      console.error('Error restoring trade:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeletePermanently = async (tradeId) => {\r\n    try {\r\n      await window.electronAPI.deletePermanently(tradeId);\r\n      setDeletedTrades(deletedTrades.filter((t) => t.id !== tradeId));\r\n    } catch (error) {\r\n      console.error('Error deleting trade permanently:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TrashContainer>\r\n      <Header>\r\n        <BackButton onClick={handleBack} />\r\n        <Title>Trash</Title>\r\n      </Header>\r\n      <TrashContent>\r\n        <TrashTable {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <TableHeader {...column.getHeaderProps()} style={{ width: `${column.width}px` }}>\r\n                    {column.render('Header')}\r\n                  </TableHeader>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.length === 0 ? (\r\n              <TableRow>\r\n                <TableCell colSpan={columns.length} style={{ textAlign: 'center' }}>\r\n                  No deleted trades yet\r\n                </TableCell>\r\n              </TableRow>\r\n            ) : (\r\n              rows.map((row) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <TableRow {...row.getRowProps()}>\r\n                    {row.cells.map((cell) => (\r\n                      <TableCell {...cell.getCellProps()} style={{ width: `${cell.column.width}px` }}>\r\n                        {cell.render('Cell')}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                );\r\n              })\r\n            )}\r\n          </tbody>\r\n        </TrashTable>\r\n        {rows.length > 0 && (\r\n          <ActionButtons>\r\n            {rows.map((row) => (\r\n              <div key={row.original.id} style={{ marginTop: '10px' }}>\r\n                <ActionButton onClick={() => handleRestore(row.original)}>Restore</ActionButton>\r\n                <ActionButton onClick={() => handleDeletePermanently(row.original.id)}>Delete Permanently</ActionButton>\r\n              </div>\r\n            ))}\r\n          </ActionButtons>\r\n        )}\r\n      </TrashContent>\r\n    </TrashContainer>\r\n  );\r\n}\r\n\r\nexport default Trash;",
  "src/index.jsx": "import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './App.jsx';\r\nimport 'styled-components';\r\n\r\nconst root = createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n);",
  "index.html": "<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Trader Workspace</title>\r\n    <meta\r\n      http-equiv=\"Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;\"\r\n    />\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script src=\"./dist/bundle.js\"></script>\r\n  </body>\r\n</html>",
  "main.js": "const { app, BrowserWindow, ipcMain } = require('electron');\r\nconst path = require('path');\r\nconst sqlite3 = require('sqlite3').Database;\r\nconst fs = require('fs').promises;\r\n\r\nlet db = null;\r\nlet vaultPath = null;\r\n\r\nasync function initializeDatabase() {\r\n  if (vaultPath && db) return;\r\n\r\n  vaultPath = path.join(app.getPath('documents'), 'TraderWorkspaceVault');\r\n  const dbPath = path.join(vaultPath, 'trades.db');\r\n\r\n  try {\r\n    await fs.mkdir(vaultPath, { recursive: true });\r\n    db = new sqlite3(dbPath, (err) => {\r\n      if (err) throw new Error(`Database connection failed: ${err.message}`);\r\n      console.log('SQLite database initialized at:', dbPath);\r\n    });\r\n\r\n    db.run(`\r\n      CREATE TABLE IF NOT EXISTS trades (\r\n        id TEXT PRIMARY KEY,\r\n        date TEXT,\r\n        account TEXT,\r\n        pair TEXT,\r\n        direction TEXT,\r\n        positionType TEXT,\r\n        risk TEXT,\r\n        result TEXT,\r\n        rr TEXT,\r\n        profitLoss TEXT,\r\n        gainedPoints TEXT,\r\n        followingPlan INTEGER,\r\n        bestTrade INTEGER,\r\n        session TEXT,\r\n        pointA TEXT,\r\n        trigger TEXT,\r\n        volumeConfirmation TEXT,\r\n        entryModel TEXT,\r\n        entryTF TEXT,\r\n        fta TEXT,\r\n        slPosition TEXT,\r\n        score TEXT,\r\n        category TEXT\r\n      )\r\n    `, (err) => {\r\n      if (err) throw new Error(`Table creation failed: ${err.message}`);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error initializing database:', error);\r\n    throw new Error('Database initialization failed');\r\n  }\r\n}\r\n\r\nfunction createWindow() {\r\n  const win = new BrowserWindow({\r\n    width: 1920,\r\n    height: 1080,\r\n    webPreferences: {\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n      preload: path.join(__dirname, 'preload.js'),\r\n    },\r\n  });\r\n\r\n  win.loadFile('index.html');\r\n  initializeDatabase().catch(console.error);\r\n}\r\n\r\napp.whenReady().then(createWindow);\r\n\r\napp.on('window-all-closed', () => {\r\n  if (db) db.close((err) => {\r\n    if (err) console.error('Error closing database:', err);\r\n    console.log('Database closed');\r\n  });\r\n  if (process.platform !== 'darwin') app.quit();\r\n});\r\n\r\napp.on('activate', () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) createWindow();\r\n});\r\n\r\nconst ensureDatabaseInitialized = async () => {\r\n  if (!db) {\r\n    await initializeDatabase();\r\n  }\r\n  if (!db) throw new Error('Database not initialized');\r\n};\r\n\r\nipcMain.handle('save-trade', async (event, trade) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run(\r\n      `\r\n      INSERT OR REPLACE INTO trades (\r\n        id, date, account, pair, direction, positionType, risk, result, rr, profitLoss,\r\n        gainedPoints, followingPlan, bestTrade, session, pointA, trigger, volumeConfirmation,\r\n        entryModel, entryTF, fta, slPosition, score, category\r\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `,\r\n      [\r\n        trade.id,\r\n        trade.date || '',\r\n        trade.account || '',\r\n        trade.pair || '',\r\n        trade.direction || '',\r\n        trade.positionType || '',\r\n        trade.risk || '',\r\n        trade.result || '',\r\n        trade.rr || '',\r\n        trade.profitLoss || '',\r\n        trade.gainedPoints || '',\r\n        trade.followingPlan ? 1 : 0,\r\n        trade.bestTrade ? 1 : 0,\r\n        trade.session || '',\r\n        trade.pointA || '',\r\n        trade.trigger || '',\r\n        trade.volumeConfirmation || '',\r\n        trade.entryModel || '',\r\n        trade.entryTF || '',\r\n        trade.fta || '',\r\n        trade.slPosition || '',\r\n        trade.score || '',\r\n        trade.category || '',\r\n      ],\r\n      (err) => {\r\n        if (err) reject(err);\r\n        resolve(true);\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\nipcMain.handle('get-trades', async () => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.all('SELECT * FROM trades', (err, rows) => {\r\n      if (err) reject(err);\r\n      resolve(rows || []);\r\n    });\r\n  });\r\n});\r\n\r\nipcMain.handle('update-trade', async (event, tradeId, updatedTrade) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run(\r\n      `\r\n      UPDATE trades SET \r\n        date = ?, account = ?, pair = ?, direction = ?, positionType = ?, risk = ?, \r\n        result = ?, rr = ?, profitLoss = ?, gainedPoints = ?, followingPlan = ?, \r\n        bestTrade = ?, session = ?, pointA = ?, trigger = ?, volumeConfirmation = ?, \r\n        entryModel = ?, entryTF = ?, fta = ?, slPosition = ?, score = ?, category = ?\r\n      WHERE id = ?\r\n    `,\r\n      [\r\n        updatedTrade.date || '',\r\n        updatedTrade.account || '',\r\n        updatedTrade.pair || '',\r\n        updatedTrade.direction || '',\r\n        updatedTrade.positionType || '',\r\n        updatedTrade.risk || '',\r\n        updatedTrade.result || '',\r\n        updatedTrade.rr || '',\r\n        updatedTrade.profitLoss || '',\r\n        updatedTrade.gainedPoints || '',\r\n        updatedTrade.followingPlan ? 1 : 0,\r\n        updatedTrade.bestTrade ? 1 : 0,\r\n        updatedTrade.session || '',\r\n        updatedTrade.pointA || '',\r\n        updatedTrade.trigger || '',\r\n        updatedTrade.volumeConfirmation || '',\r\n        updatedTrade.entryModel || '',\r\n        updatedTrade.entryTF || '',\r\n        updatedTrade.fta || '',\r\n        updatedTrade.slPosition || '',\r\n        updatedTrade.score || '',\r\n        updatedTrade.category || '',\r\n        tradeId,\r\n      ],\r\n      (err) => {\r\n        if (err) reject(err);\r\n        resolve(true);\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\nipcMain.handle('delete-trade', async (event, tradeId) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run('DELETE FROM trades WHERE id = ?', [tradeId], (err) => {\r\n      if (err) reject(err);\r\n      resolve(true);\r\n    });\r\n  });\r\n});",
  "preload.js": "const { contextBridge, ipcRenderer } = require('electron');\r\n\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n  saveTrade: (trade) => ipcRenderer.invoke('save-trade', trade),\r\n  getTrades: () => ipcRenderer.invoke('get-trades'),\r\n  updateTrade: (tradeId, updatedTrade) => ipcRenderer.invoke('update-trade', tradeId, updatedTrade),\r\n  deleteTrade: (tradeId) => ipcRenderer.invoke('delete-trade', tradeId),\r\n});",
  "webpack.config.js": "const path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: './src/index.jsx',\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'bundle.js',\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(js|jsx)$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-react'],\r\n            plugins: [\r\n              '@babel/plugin-transform-runtime',\r\n              '@babel/plugin-proposal-class-properties',\r\n              'babel-plugin-styled-components',\r\n            ],\r\n          },\r\n        },\r\n      },\r\n      {\r\n        test: /\\.svg$/,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[name].[ext]',\r\n              outputPath: 'assets/',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  target: 'electron-renderer',\r\n};",
  "package.json": "{\r\n  \"name\": \"traderworkspace\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"main.js\",\r\n  \"dependencies\": {\r\n    \"boolean\": \"^3.2.0\",\r\n    \"buffer-crc32\": \"^0.2.13\",\r\n    \"cacheable-lookup\": \"^5.0.4\",\r\n    \"cacheable-request\": \"^7.0.4\",\r\n    \"clone-response\": \"^1.0.3\",\r\n    \"debug\": \"^4.4.0\",\r\n    \"decompress-response\": \"^6.0.0\",\r\n    \"defer-to-connect\": \"^2.0.1\",\r\n    \"define-data-property\": \"^1.1.4\",\r\n    \"define-properties\": \"^1.2.1\",\r\n    \"detect-node\": \"^2.1.0\",\r\n    \"end-of-stream\": \"^1.4.4\",\r\n    \"env-paths\": \"^2.2.1\",\r\n    \"es-define-property\": \"^1.0.1\",\r\n    \"es-errors\": \"^1.3.0\",\r\n    \"es6-error\": \"^4.1.1\",\r\n    \"escape-string-regexp\": \"^4.0.0\",\r\n    \"extract-zip\": \"^2.0.1\",\r\n    \"fd-slicer\": \"^1.1.0\",\r\n    \"fs-extra\": \"^8.1.0\",\r\n    \"get-stream\": \"^5.2.0\",\r\n    \"global-agent\": \"^3.0.0\",\r\n    \"globalthis\": \"^1.0.4\",\r\n    \"gopd\": \"^1.2.0\",\r\n    \"got\": \"^11.8.6\",\r\n    \"graceful-fs\": \"^4.2.11\",\r\n    \"has-property-descriptors\": \"^1.0.2\",\r\n    \"http-cache-semantics\": \"^4.1.1\",\r\n    \"http2-wrapper\": \"^1.0.3\",\r\n    \"json-buffer\": \"^3.0.1\",\r\n    \"json-stringify-safe\": \"^5.0.1\",\r\n    \"jsonfile\": \"^4.0.0\",\r\n    \"keyv\": \"^4.5.4\",\r\n    \"lowercase-keys\": \"^2.0.0\",\r\n    \"matcher\": \"^3.0.0\",\r\n    \"mimic-response\": \"^1.0.1\",\r\n    \"ms\": \"^2.1.3\",\r\n    \"normalize-url\": \"^6.1.0\",\r\n    \"object-keys\": \"^1.1.1\",\r\n    \"once\": \"^1.4.0\",\r\n    \"p-cancelable\": \"^2.1.1\",\r\n    \"pend\": \"^1.2.0\",\r\n    \"progress\": \"^2.0.3\",\r\n    \"pump\": \"^3.0.2\",\r\n    \"quick-lru\": \"^5.1.1\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-router-dom\": \"^7.2.0\",\r\n    \"react-table\": \"^7.8.0\",\r\n    \"resolve-alpn\": \"^1.2.1\",\r\n    \"responselike\": \"^2.0.1\",\r\n    \"roarr\": \"^2.15.4\",\r\n    \"semver\": \"^6.3.1\",\r\n    \"semver-compare\": \"^1.0.0\",\r\n    \"serialize-error\": \"^7.0.1\",\r\n    \"sprintf-js\": \"^1.1.3\",\r\n    \"sqlite3\": \"^5.1.7\",\r\n    \"styled-components\": \"^6.1.15\",\r\n    \"sumchecker\": \"^3.0.1\",\r\n    \"type-fest\": \"^0.13.1\",\r\n    \"undici-types\": \"^6.19.8\",\r\n    \"universalify\": \"^0.1.2\",\r\n    \"wrappy\": \"^1.0.2\",\r\n    \"yauzl\": \"^2.10.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.26.9\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.18.6\",\r\n    \"@babel/plugin-transform-runtime\": \"^7.26.9\",\r\n    \"@babel/preset-env\": \"^7.26.9\",\r\n    \"@babel/preset-react\": \"^7.26.3\",\r\n    \"babel-loader\": \"^9.2.1\",\r\n    \"babel-plugin-styled-components\": \"^2.1.4\",\r\n    \"css-loader\": \"^7.1.2\",\r\n    \"electron\": \"^34.2.0\",\r\n    \"electron-rebuild\": \"^3.2.9\",\r\n    \"file-loader\": \"^6.2.0\",\r\n    \"style-loader\": \"^4.0.0\",\r\n    \"webpack\": \"^5.98.0\",\r\n    \"webpack-cli\": \"^6.0.1\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"start\": \"electron .\",\r\n    \"build\": \"webpack --mode production\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"description\": \"\"\r\n}\r\n",
  "README.md": "# TraderWorkspace\r\n\r\n## Опис проєкту\r\n\r\n**TraderWorkspace** — це десктопний додаток на основі Electron, розроблений для трейдерів, щоб допомогти їм вести журнал трейдів, відстежувати щоденні рутини, аналізувати продуктивність, управляти ризиками, створювати звіти і вчитися новим стратегіям. Додаток надає зручний інтерфейс із темним дизайном, подібним до Obsidian, із фіолетовими акцентами, і дозволяє локально зберігати дані у базі даних SQLite, забезпечуючи конфіденційність і швидкість, як у текстових файлах Markdown.\r\n\r\n### Ідея програми\r\nTraderWorkspace призначений для трейдерів, які хочуть організувати свої торгові операції, аналізувати історичні дані і покращувати свої стратегії. Основна мета — створити всебічний інструмент для:\r\n- Журналу трейдів (Trade Journal) із можливістю додавання, редагування, видалення і фільтрації трейдів.\r\n- Щоденної рутини (Daily Routine) для планування і відстеження торгових звичок.\r\n- Аналізу продуктивності (Performance Analysis) для оцінки результатів торгів (загальна прибутковість, середній профіт/збиток тощо).\r\n- Статистики (Statistics) із фільтрами (за датою, активом, результатом), категоріями (прибутковість, ризики) і відображенням графіків/діаграм (наприклад, через Chart.js або D3.js).\r\n- Управління ризиками (Risk Management) для оцінки і мінімізації ризиків (аналіз позиційного розміру, волатильності).\r\n- Навчальної секції (Learning Section) для вивчення торгових стратегій із інтерактивними уроками і нотатками.\r\n- Системи звітів (Reporting System) для генерації звітів у форматах PDF або JSON для експорту даних.\r\n- Налаштувань (Settings) для конфігурації додатку (темна/світла тема, вибір папки для даних, синхронізація через Dropbox тощо).\r\n\r\nДодаток інспірований простотою і портативністю Obsidian, але адаптований для трейдерів із фокусом на локальному зберіганні даних і потужному аналізі.\r\n\r\n---\r\n\r\n## Поточний стан реалізації\r\n\r\n### Реалізовано\r\n- **Trade Journal:**\r\n  - Додавання, редагування, видалення і фільтрація трейдів (за тиждень, місяць, усі трейди).\r\n  - Таблиця з інформацією про трейди (дата, актив, рахунок, пара, сесія, напрямок, результат, позиційний розмір, отримані пункти, клас трейду тощо).\r\n  - Темний дизайн із фіолетовими акцентами (#5e2ca5) і анімацією кнопок, реалізований через `styled-components`.\r\n  - Локальне зберігання трейдів у SQLite через бібліотеку `sqlite3` у файлі `trades.db` у папці `Documents/TraderWorkspaceVault`.\r\n\r\n- **Основний інтерфейс (Home):**\r\n  - Головне меню з галереєю кнопок для переходу до розділів (Trade Journal, Daily Routine, Performance Analysis, Statistics, Risk Management, Learning Section, Reporting System, Settings).\r\n  - Привітання (\"Good Morning!\", \"Good Afternoon!\", \"Good Evening!\") із фразою \"Let's get to work!\".\r\n\r\n- **Технологічний стек:**\r\n  - **Electron 34.2.0** для створення кросплатформового десктопного додатку.\r\n  - **React 18.2.0** для побудови UI-компонентів.\r\n  - **SQLite3** для локального зберігання даних у файлі `trades.db`.\r\n  - **styled-components 6.1.15** для CSS-in-JS стилізації з темним фоном (#1a1a1a) і фіолетовими акцентами (#5e2ca5).\r\n  - **react-router-dom 7.2.0** для навігації між сторінками.\r\n  - **react-table 7.8.0** для створення таблиці трейдів із пагінацією.\r\n  - **Webpack 5.98.0** для компіляції React-коду в `dist/bundle.js`.\r\n  - **Babel** (з `babel-loader`, `@babel/preset-react`, `@babel/plugin-transform-runtime`, `@babel/plugin-proposal-class-properties`, `babel-plugin-styled-components`) для підтримки JSX і сучасного JavaScript.\r\n\r\n- **Інфраструктура:**\r\n  - Локальне збереження даних у файлі `trades.db`, подібно до текстових файлів у Obsidian.\r\n  - Автоматичне створення і збереження даних без діалогових вікон, як у Vault Obsidian.\r\n\r\n### Плани на майбутнє\r\n- **Короткострокові цілі (1-2 місяці):**\r\n  - Реалізувати секцію \"Statistics\" із фільтрами (дата, актив, результат), категоріями (прибутковість, ризики), і графіками (Chart.js або D3.js).\r\n  - Додати базову функціональність \"Daily Routine\" для планування і відстеження торгових звичок.\r\n\r\n- **Середньострокові цілі (3-6 місяців):**\r\n  - Розробити \"Performance Analysis\" для аналізу продуктивності трейдера (загальна прибутковість, середній профіт/збиток, статистика за періодами).\r\n  - Додати \"Risk Management\" із інструментами оцінки ризиків (аналіз позиційного розміру, волатильності, відсотка ризику).\r\n\r\n- **Довгострокові цілі (6+ місяців):**\r\n  - Реалізувати \"Learning Section\" із інтерактивними уроками, нотатками і прикладами стратегій, збереженими у SQLite.\r\n  - Створити \"Reporting System\" для генерації звітів у форматах PDF або JSON із можливістю експорту.\r\n  - Додати підтримку тем (темна/світла) через `styled-components` і `ThemeProvider`, а також синхронізацію через Dropbox у \"Settings\".\r\n\r\n---\r\n\r\n## Вимоги до програмного забезпечення\r\n\r\n### Для розробки\r\n- **Node.js 20.18.2** — використовується для запуску проєкту і менеджменту залежностей через npm. Рекомендується використовувати `nvm-windows` для Windows для легкого перемикання версій:\r\n  - Завантажте `nvm-windows` з [github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows/releases).\r\n  - Встановіть і виконайте:\r\n    ```bash\r\n    nvm install 20.18.2\r\n    nvm use 20.18.2\r\n    \r\n## Примітки для чат-ботів або AI\r\n\r\nЦей проєкт є десктопним додатком для трейдерів на Electron з React, SQLite, і styled-components. Якщо ви чат-бот або AI (наприклад, Grok 3), ви можете:\r\n- Допомагати реалізувати нові функції, такі як \"Statistics\" (з Chart.js для графіків, фільтрами за датою/активом, категоріями).\r\n- Пропонувати код для додавання \"Daily Routine\", \"Performance Analysis\", або інших розділів.\r\n- Надавати поради з оптимізації, тестування (наприклад, із Jest), чи інтеграції нових бібліотек (наприклад, D3.js, pdfkit для звітів).\r\n- Допомагати з налаштуванням Webpack, Babel, або Electron для нових функцій.\r\n- Використовуйте цей контекст для розуміння структури, технологій, і цілей проєкту, щоб відповідати на запити, наприклад:\r\n  - \"Як додати графіки у Statistics, використовуючи Chart.js, у моєму проєкті TraderWorkspace?\"\r\n  - \"Як реалізувати темну/світлу тему через styled-components?\"\r\n  - \"Як додати експорт даних у PDF для Reporting System?\"\r\n\r\nБудь ласка, враховуйте технологічний стек (Electron 34.2.0, React 18.2.0, SQLite3, styled-components 6.1.15, Webpack 5.98.0, Babel), темний дизайн (#1a1a1a фон, #5e2ca5 акценти), локальне зберігання у SQLite (`trades.db` у `Documents/TraderWorkspaceVault`), і структуру проєкту, описану вище.\r\n```",
  ".gitignore": "node_modules/\r\n*.log"
}