{
  "README.md": "# TraderWorkspace\r\n\r\n## Опис проєкту\r\n\r\n**TraderWorkspace** — це десктопний додаток на основі Electron, розроблений для трейдерів, щоб допомогти їм вести журнал трейдів, відстежувати щоденні рутини, аналізувати продуктивність, управляти ризиками, створювати звіти і вчитися новим стратегіям. Додаток надає зручний інтерфейс із темним дизайном, подібним до Obsidian, із фіолетовими акцентами, і дозволяє локально зберігати дані у базі даних SQLite, забезпечуючи конфіденційність і швидкість, як у текстових файлах Markdown.\r\n\r\n### Ідея програми\r\nTraderWorkspace призначений для трейдерів, які хочуть організувати свої торгові операції, аналізувати історичні дані і покращувати свої стратегії. Основна мета — створити всебічний інструмент для:\r\n- Журналу трейдів (Trade Journal) із можливістю додавання, редагування, видалення і фільтрації трейдів.\r\n- Щоденної рутини (Daily Routine) для планування і відстеження торгових звичок.\r\n- Аналізу продуктивності (Performance Analysis) для оцінки результатів торгів (загальна прибутковість, середній профіт/збиток тощо).\r\n- Статистики (Statistics) із фільтрами (за датою, активом, результатом), категоріями (прибутковість, ризики) і відображенням графіків/діаграм (наприклад, через Chart.js або D3.js).\r\n- Управління ризиками (Risk Management) для оцінки і мінімізації ризиків (аналіз позиційного розміру, волатильності).\r\n- Навчальної секції (Learning Section) для вивчення торгових стратегій із інтерактивними уроками і нотатками.\r\n- Системи звітів (Reporting System) для генерації звітів у форматах PDF або JSON для експорту даних.\r\n- Налаштувань (Settings) для конфігурації додатку (темна/світла тема, вибір папки для даних, синхронізація через Dropbox тощо).\r\n\r\nДодаток інспірований простотою і портативністю Obsidian, але адаптований для трейдерів із фокусом на локальному зберіганні даних і потужному аналізі.\r\n\r\n---\r\n\r\n## Поточний стан реалізації\r\n\r\n### Реалізовано\r\n- **Trade Journal:**\r\n  - Додавання, редагування, видалення і фільтрація трейдів (за тиждень, місяць, усі трейди).\r\n  - Таблиця з інформацією про трейди (дата, актив, рахунок, пара, сесія, напрямок, результат, позиційний розмір, отримані пункти, клас трейду тощо).\r\n  - Темний дизайн із фіолетовими акцентами (#5e2ca5) і анімацією кнопок, реалізований через `styled-components`.\r\n  - Локальне зберігання трейдів у SQLite через бібліотеку `sqlite3` у файлі `trades.db` у папці `Documents/TraderWorkspaceVault`.\r\n\r\n- **Основний інтерфейс (Home):**\r\n  - Головне меню з галереєю кнопок для переходу до розділів (Trade Journal, Daily Routine, Performance Analysis, Statistics, Risk Management, Learning Section, Reporting System, Settings).\r\n  - Привітання (\"Good Morning!\", \"Good Afternoon!\", \"Good Evening!\") із фразою \"Let's get to work!\".\r\n\r\n- **Технологічний стек:**\r\n  - **Electron 34.2.0** для створення кросплатформового десктопного додатку.\r\n  - **React 18.2.0** для побудови UI-компонентів.\r\n  - **SQLite3** для локального зберігання даних у файлі `trades.db`.\r\n  - **styled-components 6.1.15** для CSS-in-JS стилізації з темним фоном (#1a1a1a) і фіолетовими акцентами (#5e2ca5).\r\n  - **react-router-dom 7.2.0** для навігації між сторінками.\r\n  - **react-table 7.8.0** для створення таблиці трейдів із пагінацією.\r\n  - **Webpack 5.98.0** для компіляції React-коду в `dist/bundle.js`.\r\n  - **Babel** (з `babel-loader`, `@babel/preset-react`, `@babel/plugin-transform-runtime`, `@babel/plugin-proposal-class-properties`, `babel-plugin-styled-components`) для підтримки JSX і сучасного JavaScript.\r\n\r\n- **Інфраструктура:**\r\n  - Локальне збереження даних у файлі `trades.db`, подібно до текстових файлів у Obsidian.\r\n  - Автоматичне створення і збереження даних без діалогових вікон, як у Vault Obsidian.\r\n\r\n### Плани на майбутнє\r\n- **Короткострокові цілі (1-2 місяці):**\r\n  - Реалізувати секцію \"Statistics\" із фільтрами (дата, актив, результат), категоріями (прибутковість, ризики), і графіками (Chart.js або D3.js).\r\n  - Додати базову функціональність \"Daily Routine\" для планування і відстеження торгових звичок.\r\n\r\n- **Середньострокові цілі (3-6 місяців):**\r\n  - Розробити \"Performance Analysis\" для аналізу продуктивності трейдера (загальна прибутковість, середній профіт/збиток, статистика за періодами).\r\n  - Додати \"Risk Management\" із інструментами оцінки ризиків (аналіз позиційного розміру, волатильності, відсотка ризику).\r\n\r\n- **Довгострокові цілі (6+ місяців):**\r\n  - Реалізувати \"Learning Section\" із інтерактивними уроками, нотатками і прикладами стратегій, збереженими у SQLite.\r\n  - Створити \"Reporting System\" для генерації звітів у форматах PDF або JSON із можливістю експорту.\r\n  - Додати підтримку тем (темна/світла) через `styled-components` і `ThemeProvider`, а також синхронізацію через Dropbox у \"Settings\".\r\n\r\n---\r\n\r\n## Вимоги до програмного забезпечення\r\n\r\n### Для розробки\r\n- **Node.js 20.18.2** — використовується для запуску проєкту і менеджменту залежностей через npm. Рекомендується використовувати `nvm-windows` для Windows для легкого перемикання версій:\r\n  - Завантажте `nvm-windows` з [github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows/releases).\r\n  - Встановіть і виконайте:\r\n    ```bash\r\n    nvm install 20.18.2\r\n    nvm use 20.18.2\r\n    \r\n## Примітки для чат-ботів або AI\r\n\r\nЦей проєкт є десктопним додатком для трейдерів на Electron з React, SQLite, і styled-components. Якщо ви чат-бот або AI (наприклад, Grok 3), ви можете:\r\n- Допомагати реалізувати нові функції, такі як \"Statistics\" (з Chart.js для графіків, фільтрами за датою/активом, категоріями).\r\n- Пропонувати код для додавання \"Daily Routine\", \"Performance Analysis\", або інших розділів.\r\n- Надавати поради з оптимізації, тестування (наприклад, із Jest), чи інтеграції нових бібліотек (наприклад, D3.js, pdfkit для звітів).\r\n- Допомагати з налаштуванням Webpack, Babel, або Electron для нових функцій.\r\n- Використовуйте цей контекст для розуміння структури, технологій, і цілей проєкту, щоб відповідати на запити, наприклад:\r\n  - \"Як додати графіки у Statistics, використовуючи Chart.js, у моєму проєкті TraderWorkspace?\"\r\n  - \"Як реалізувати темну/світлу тему через styled-components?\"\r\n  - \"Як додати експорт даних у PDF для Reporting System?\"\r\n\r\nБудь ласка, враховуйте технологічний стек (Electron 34.2.0, React 18.2.0, SQLite3, styled-components 6.1.15, Webpack 5.98.0, Babel), темний дизайн (#1a1a1a фон, #5e2ca5 акценти), локальне зберігання у SQLite (`trades.db` у `Documents/TraderWorkspaceVault`), і структуру проєкту, описану вище. \r\n```\r\n## Оновлення від 26 лютого 2025 року\r\n\r\nСьогодні ми внесли низку покращень до проєкту \"Trader Workspace\", зосередившись на функціональності збереження трейдів, обробці скріншотів і виправленні помилок. Ось що було реалізовано:\r\n\r\n### Основні зміни\r\n1. **Виправлення помилки збереження трейдів у SQLite:**\r\n   - Вирішено проблему `SQLITE_ERROR: 26 values for 27 columns`, синхронізувавши кількість значень у запиті `INSERT OR REPLACE INTO trades` із визначенням таблиці (27 колонок).\r\n   - Додано коректну обробку всіх полів трейду, включаючи `topDownAnalysis`, `execution`, `management` і `conclusion`, які зберігаються як JSON.\r\n\r\n2. **Окрема таблиця для Notes & Mistakes:**\r\n   - Створено нову таблицю `notes` у SQLite для зберігання нотаток (`title` і `text`) із зовнішнім ключем `tradeId`, що пов’язує їх із трейдами.\r\n   - Оновлено методи `save-trade`, `get-trades`, `update-trade` і `delete-trade`, щоб нотатки зберігалися та отримувалися з окремої таблиці.\r\n\r\n3. **Покращення обробки скріншотів:**\r\n   - Додано підтримку вставки зображень із буфера обміну через Clipboard API. Зображення конвертуються в `ArrayBuffer` і зберігаються у `TraderWorkspaceVault/screenshots/` як PNG-файли.\r\n   - Реалізовано перегляд зображень на весь екран при кліку на них із модальним вікном і кнопкою закриття.\r\n   - Прибрано відображення шляху до файлу в інтерфейсі; тепер показується лише зображення.\r\n   - Зображення відображаються з правильними пропорціями (`width: 100%`, `height: auto`), зберігаючи ширину блоку.\r\n\r\n4. **Інтерфейсні покращення:**\r\n   - Поля `<ScreenshotInput>` і `<TextArea>` вирівняно по центру блоку за допомогою `flex` і `align-items: center`.\r\n   - Додано відступ між полями \"RR\" і \"Profit (%)\" у формі трейду, зберігши `gap: 15px` у `<FormRow>`.\r\n\r\n5. **Виправлення іконок:**\r\n   - Шлях до іконок (`edit-icon.svg`, `delete-icon.svg`) змінено на `/assets/`, з рекомендацією розмістити їх у `public/assets/` для коректного завантаження в Electron.\r\n\r\n### Виправлені помилки\r\n- **Помилка збереження трейдів:** Вирішено проблему з невідповідністю колонок і значень у SQLite.\r\n- **Проблема з \"Cancel\":** Перехід на `/trade-journal` із параметром `{ replace: true }` для уникнення зникнення кнопок \"Add new Trade\" і \"Filter\".\r\n\r\n### Рекомендації для запуску\r\n- Видаліть стару базу даних (`C:\\Users\\<YourUser>\\Documents\\TraderWorkspaceVault\\trades.db`), щоб уникнути конфліктів зі старою схемою.\r\n- Розмістіть файли `edit-icon.svg` і `delete-icon.svg` у `public/assets/`.\r\n- Виконайте:\r\n  ```bash\r\n  npm run build\r\n  npm start\r\n# Файли, які завжди мають бути у списку\r\n\r\nЦі файли завжди зберігаються та передаються для обробки:\r\n\r\n- `README.md`\r\n- `webpack.config.js`\r\n- `preload.js`\r\n- `index.html`\r\n- `main.js`\r\n- `src/App.jsx`\r\n- `src/components/Home.jsx`\r\n- `src/index.jsx`\r\n- `package.json`\r\n\r\n# Динамічний список файлів\r\n\r\nДеякі файли додаються до списку лише в разі потреби. Якщо ти не плануєш працювати з певним файлом (наприклад, `Trash.jsx`), його не потрібно додавати, оскільки боту не потрібен його код.\r\n\r\nЯкщо ти хочеш змінювати або додавати функціонал у певному компоненті (наприклад, `DailyRoutine.jsx`), його необхідно включити до списку, щоб бот отримав повний код і зміг правильно оновлювати функціонал.\r\n\r\n### Приклад додаткового файлу:\r\n- `src/components/DailyRoutine.jsx`\r\n\r\nЯкщо функціонал пов’язаний із кількома компонентами, всі залежні файли слід додати до списку, щоб бот коректно враховував їхню взаємодію.\r\n\r\n## Оновлення від 28 лютого 2025 року\r\n\r\nСьогодні ми розширили функціональність Learning Section та Statistics, додавши можливість створення та керування нотатками, а також візуалізацію даних.\r\n\r\n### Основні зміни\r\n1. **Розширення бази даних для Learning Section:**\r\n   - Створено нову таблицю `learning_notes` у SQLite для зберігання навчальних нотаток\r\n   - Додано поля `created_at` та `updated_at` для відстеження часу створення та оновлення нотаток\r\n   - Реалізовано CRUD операції для роботи з нотатками\r\n\r\n2. **Новий компонент Notes.jsx:**\r\n   - Створено інтерфейс для роботи з нотатками в Learning Section\r\n   - Додано можливість створення, редагування та видалення нотаток\r\n   - Реалізовано автоматичне збереження змін\r\n   - Інтегровано стилі, що відповідають загальному дизайну додатку\r\n\r\n3. **Розширення функціоналу Statistics:**\r\n   - Додано візуалізацію статистичних даних за допомогою Chart.js\r\n   - Реалізовано графіки для аналізу:\r\n     - Розподілу прибуткових/збиткових угод\r\n     - Динаміки прибутку за періодами\r\n     - Співвідношення ризику до прибутку\r\n   - Додано інтерактивні фільтри для аналізу даних\r\n   - Реалізовано експорт статистики\r\n\r\n4. **Оновлення навігації:**\r\n   - Додано новий пункт \"Notes\" у Learning Section\r\n   - Реалізовано коректну маршрутизацію між компонентами\r\n\r\n### Виправлені помилки\r\n- Оптимізовано відображення списку нотаток\r\n- Виправлено проблеми з відступами та центруванням елементів\r\n- Покращено відгук інтерфейсу при взаємодії з користувачем\r\n- Оптимізовано продуктивність при рендерингу графіків\r\n\r\n[Previous content remains the same until the requirements section...]\r\n\r\n## Вимоги до програмного забезпечення\r\n\r\n### Для розробки\r\n- **Node.js 20.18.2** — використовується для запуску проєкту і менеджменту залежностей через npm.\r\n  - Завантажте `nvm-windows` з [github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows/releases).\r\n  - Встановіть і виконайте:\r\n    ```bash\r\n    nvm install 20.18.2\r\n    nvm use 20.18.2\r\n    ```\r\n\r\n### Додаткові залежності\r\nДля коректної роботи з проєктом необхідно встановити наступні пакети:\r\n```bash\r\n# Основні залежності\r\nnpm install sqlite3 sqlite styled-components react-router-dom\r\n\r\n# Залежності для візуалізації даних\r\nnpm install chart.js react-chartjs-2\r\n```\r\n\r\n## Важливі примітки для розробників та чат-ботів\r\n\r\n### Необхідні файли для роботи\r\nДля повноцінної роботи з проєктом необхідна наявність наступних файлів:\r\n```plaintext\r\ncore_files/\r\n  ├── README.md\r\n  ├── webpack.config.js\r\n  ├── preload.js\r\n  ├── index.html\r\n  ├── main.js\r\n  ├── package.json\r\n  └── src/\r\n      ├── App.jsx\r\n      ├── index.jsx\r\n      └── components/\r\n          ├── Home.jsx\r\n          ├── LearningSection/\r\n          │   └── Notes.jsx\r\n          ├── Statistics.jsx\r\n          └── charts/\r\n              ├── ProfitDistributionChart.jsx\r\n              ├── TimelineChart.jsx\r\n              └── RiskRewardChart.jsx\r\n```\r\n\r\n### Перевірка наявності файлів\r\nЯкщо ви чат-бот або AI, будь ласка:\r\n1. Перевірте наявність усіх необхідних файлів у списку користувача\r\n2. Якщо якісь файли відсутні, повідомте користувача про необхідність їх додати\r\n3. Перевірте наявність усіх необхідних залежностей в package.json\r\n4. Переконайтеся, що структура проєкту відповідає наведеній вище схемі\r\n\r\n### Ключові залежності\r\nПереконайтеся, що в package.json присутні наступні залежності:\r\n```json\r\n{\r\n  \"dependencies\": {\r\n    \"electron\": \"^34.2.0\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-router-dom\": \"^7.2.0\",\r\n    \"sqlite3\": \"^5.1.6\",\r\n    \"sqlite\": \"^5.1.1\",\r\n    \"styled-components\": \"^6.1.15\",\r\n    \"chart.js\": \"^4.4.1\",\r\n    \"react-chartjs-2\": \"^5.2.0\"\r\n  }\r\n}\r\n```\r\n",
  "webpack.config.js": "const path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: './src/index.jsx',\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'bundle.js',\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(js|jsx)$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-react'],\r\n            plugins: [\r\n              '@babel/plugin-transform-runtime',\r\n              '@babel/plugin-proposal-class-properties',\r\n              'babel-plugin-styled-components',\r\n            ],\r\n          },\r\n        },\r\n      },\r\n      {\r\n        test: /\\.svg$/,\r\n        use: [\r\n          {\r\n            loader: 'file-loader',\r\n            options: {\r\n              name: '[name].[ext]',\r\n              outputPath: 'assets/',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  target: 'electron-renderer',\r\n};",
  "preload.js": "const { contextBridge, ipcRenderer } = require('electron');\r\n\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n  saveTrade: (trade) => ipcRenderer.invoke('save-trade', trade),\r\n  getTrades: () => ipcRenderer.invoke('get-trades'),\r\n  updateTrade: (tradeId, updatedTrade) => ipcRenderer.invoke('update-trade', tradeId, updatedTrade),\r\n  deleteTrade: (tradeId) => ipcRenderer.invoke('delete-trade', tradeId),\r\n  saveFile: (file) => ipcRenderer.invoke('save-file', file),\r\n  saveBlobAsFile: (buffer) => ipcRenderer.invoke('save-blob-as-file', buffer),\r\n  saveDailyRoutine: (routine) => ipcRenderer.invoke('save-daily-routine', routine),\r\n  getDailyRoutine: (date) => ipcRenderer.invoke('get-daily-routine', date),\r\n});",
  "index.html": "<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Trader Workspace</title>\r\n    <meta\r\n      http-equiv=\"Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;\"\r\n    />\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script src=\"./dist/bundle.js\"></script>\r\n  </body>\r\n</html>",
  "main.js": "const { app, BrowserWindow, ipcMain } = require('electron');\r\nconst path = require('path');\r\nconst sqlite3 = require('sqlite3').verbose();\r\nconst fs = require('fs').promises;\r\n\r\nlet db = null;\r\nlet vaultPath = null;\r\n\r\nasync function initializeDatabase() {\r\n  if (vaultPath && db) return;\r\n  vaultPath = path.join(app.getPath('documents'), 'TraderWorkspaceVault');\r\n  const dbPath = path.join(vaultPath, 'trades.db');\r\n  try {\r\n    await fs.mkdir(vaultPath, { recursive: true });\r\n    db = new sqlite3.Database(dbPath, (err) => {\r\n      if (err) throw new Error(`Database connection failed: ${err.message}`);\r\n      console.log('SQLite database initialized at:', dbPath);\r\n    });\r\n\r\n    // Таблиця trades\r\n    db.run(`\r\n      CREATE TABLE IF NOT EXISTS trades (\r\n        id TEXT PRIMARY KEY,\r\n        date TEXT,\r\n        account TEXT,\r\n        pair TEXT,\r\n        direction TEXT,\r\n        positionType TEXT,\r\n        risk TEXT,\r\n        result TEXT,\r\n        rr TEXT,\r\n        profitLoss TEXT,\r\n        gainedPoints TEXT,\r\n        followingPlan INTEGER,\r\n        bestTrade INTEGER,\r\n        session TEXT,\r\n        pointA TEXT,\r\n        trigger TEXT,\r\n        volumeConfirmation TEXT,\r\n        entryModel TEXT,\r\n        entryTF TEXT,\r\n        fta TEXT,\r\n        slPosition TEXT,\r\n        score TEXT,\r\n        category TEXT,\r\n        topDownAnalysis TEXT,\r\n        execution TEXT,\r\n        management TEXT,\r\n        conclusion TEXT\r\n      )\r\n    `, (err) => {\r\n      if (err) throw new Error(`Table trades creation failed: ${err.message}`);\r\n    });\r\n\r\n    // Таблиця notes\r\n    db.run(`\r\n      CREATE TABLE IF NOT EXISTS notes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        tradeId TEXT,\r\n        title TEXT,\r\n        text TEXT,\r\n        FOREIGN KEY (tradeId) REFERENCES trades(id)\r\n      )\r\n    `, (err) => {\r\n      if (err) throw new Error(`Table notes creation failed: ${err.message}`);\r\n    });\r\n\r\n    // Таблиця learning_notes\r\n    db.run(`\r\n      CREATE TABLE IF NOT EXISTS learning_notes (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        title TEXT NOT NULL,\r\n        content TEXT,\r\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n      )\r\n    `, (err) => {\r\n      if (err) throw new Error(`Table learning_notes creation failed: ${err.message}`);\r\n    });\r\n\r\n    // Таблиця daily_routines\r\n    db.run(`\r\n      CREATE TABLE IF NOT EXISTS daily_routines (\r\n        date TEXT PRIMARY KEY,\r\n        preSession TEXT,\r\n        postSession TEXT,\r\n        emotions TEXT,\r\n        notes TEXT\r\n      )\r\n    `, (err) => {\r\n      if (err) throw new Error(`Table daily_routines creation failed: ${err.message}`);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error initializing database:', error);\r\n    throw new Error('Database initialization failed');\r\n  }\r\n}\r\n\r\nfunction createWindow() {\r\n  const win = new BrowserWindow({\r\n    width: 1920,\r\n    height: 1080,\r\n    webPreferences: {\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n      preload: path.join(__dirname, 'preload.js'),\r\n    },\r\n  });\r\n  win.loadFile('index.html');\r\n  initializeDatabase().catch(console.error);\r\n}\r\n\r\napp.whenReady().then(createWindow);\r\n\r\napp.on('window-all-closed', () => {\r\n  if (db) db.close((err) => {\r\n    if (err) console.error('Error closing database:', err);\r\n    console.log('Database closed');\r\n  });\r\n  if (process.platform !== 'darwin') app.quit();\r\n});\r\n\r\napp.on('activate', () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) createWindow();\r\n});\r\n\r\nconst ensureDatabaseInitialized = async () => {\r\n  if (!db) {\r\n    await initializeDatabase();\r\n  }\r\n  if (!db) throw new Error('Database not initialized');\r\n};\r\n\r\nipcMain.handle('saveNote', async (event, note) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    if (note.id) {\r\n      // Оновлення існуючої нотатки\r\n      db.run(\r\n        'UPDATE learning_notes SET title = ?, content = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',\r\n        [note.title, note.content, note.id],\r\n        function(err) {\r\n          if (err) {\r\n            console.error('Error updating learning note:', err);\r\n            reject(err);\r\n          } else {\r\n            resolve(note.id);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      // Створення нової нотатки\r\n      db.run(\r\n        'INSERT INTO learning_notes (title, content) VALUES (?, ?)',\r\n        [note.title, note.content],\r\n        function(err) {\r\n          if (err) {\r\n            console.error('Error creating learning note:', err);\r\n            reject(err);\r\n          } else {\r\n            resolve(this.lastID);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  });\r\n});\r\n\r\nipcMain.handle('deleteNote', async (event, id) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run('DELETE FROM learning_notes WHERE id = ?', [id], (err) => {\r\n      if (err) {\r\n        console.error('Error deleting learning note:', err);\r\n        reject(err);\r\n      } else {\r\n        resolve(true);\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\nipcMain.handle('save-trade', async (event, trade) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run(\r\n      `INSERT OR REPLACE INTO trades (id, date, account, pair, direction, positionType, risk, result, rr, profitLoss, gainedPoints, followingPlan, bestTrade, session, pointA, trigger, volumeConfirmation, entryModel, entryTF, fta, slPosition, score, category, topDownAnalysis, execution, management, conclusion) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\r\n      [\r\n        trade.id,\r\n        trade.date || '',\r\n        trade.account || '',\r\n        trade.pair || '',\r\n        trade.direction || '',\r\n        trade.positionType || '',\r\n        trade.risk || '',\r\n        trade.result || '',\r\n        trade.rr || '',\r\n        trade.profitLoss || '',\r\n        trade.gainedPoints || '',\r\n        trade.followingPlan ? 1 : 0,\r\n        trade.bestTrade ? 1 : 0,\r\n        trade.session || '',\r\n        trade.pointA || '',\r\n        trade.trigger || '',\r\n        trade.volumeConfirmation || '',\r\n        trade.entryModel || '',\r\n        trade.entryTF || '',\r\n        trade.fta || '',\r\n        trade.slPosition || '',\r\n        trade.score || '',\r\n        trade.category || '',\r\n        JSON.stringify(trade.topDownAnalysis) || '[]',\r\n        JSON.stringify(trade.execution) || '{}',\r\n        JSON.stringify(trade.management) || '{}',\r\n        JSON.stringify(trade.conclusion) || '{}',\r\n      ],\r\n      async (err) => {\r\n        if (err) {\r\n          console.error('Error saving trade:', err);\r\n          reject(err);\r\n          return;\r\n        }\r\n        if (trade.notes && trade.notes.length > 0) {\r\n          for (const note of trade.notes) {\r\n            await new Promise((noteResolve, noteReject) => {\r\n              db.run(\r\n                'INSERT INTO notes (tradeId, title, text) VALUES (?, ?, ?)',\r\n                [trade.id, note.title, note.text],\r\n                (noteErr) => {\r\n                  if (noteErr) noteReject(noteErr);\r\n                  else noteResolve();\r\n                }\r\n              );\r\n            });\r\n          }\r\n        }\r\n        resolve(true);\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\nipcMain.handle('get-trades', async () => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.all('SELECT * FROM trades', (err, tradeRows) => {\r\n      if (err) {\r\n        console.error('Error fetching trades:', err);\r\n        reject(err);\r\n        return;\r\n      }\r\n      const trades = tradeRows.map(row => ({\r\n        ...row,\r\n        topDownAnalysis: JSON.parse(row.topDownAnalysis || '[]'),\r\n        execution: JSON.parse(row.execution || '{}'),\r\n        management: JSON.parse(row.management || '{}'),\r\n        conclusion: JSON.parse(row.conclusion || '{}'),\r\n        notes: [],\r\n      }));\r\n      const tradeIds = trades.map(trade => trade.id);\r\n      if (tradeIds.length === 0) {\r\n        resolve(trades);\r\n        return;\r\n      }\r\n      db.all(\r\n        'SELECT * FROM notes WHERE tradeId IN (' + tradeIds.map(() => '?').join(',') + ')',\r\n        tradeIds,\r\n        (err, noteRows) => {\r\n          if (err) {\r\n            console.error('Error fetching notes:', err);\r\n            reject(err);\r\n            return;\r\n          }\r\n          trades.forEach(trade => {\r\n            trade.notes = noteRows\r\n              .filter(note => note.tradeId === trade.id)\r\n              .map(note => ({ title: note.title, text: note.text }));\r\n          });\r\n          resolve(trades || []);\r\n        }\r\n      );\r\n    });\r\n  });\r\n});\r\n\r\nipcMain.handle('update-trade', async (event, tradeId, updatedTrade) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run(\r\n      `UPDATE trades SET date = ?, account = ?, pair = ?, direction = ?, positionType = ?, risk = ?, result = ?, rr = ?, profitLoss = ?, gainedPoints = ?, followingPlan = ?, bestTrade = ?, session = ?, pointA = ?, trigger = ?, volumeConfirmation = ?, entryModel = ?, entryTF = ?, fta = ?, slPosition = ?, score = ?, category = ?, topDownAnalysis = ?, execution = ?, management = ?, conclusion = ? WHERE id = ?`,\r\n      [\r\n        updatedTrade.date || '',\r\n        updatedTrade.account || '',\r\n        updatedTrade.pair || '',\r\n        updatedTrade.direction || '',\r\n        updatedTrade.positionType || '',\r\n        updatedTrade.risk || '',\r\n        updatedTrade.result || '',\r\n        updatedTrade.rr || '',\r\n        updatedTrade.profitLoss || '',\r\n        updatedTrade.gainedPoints || '',\r\n        updatedTrade.followingPlan ? 1 : 0,\r\n        updatedTrade.bestTrade ? 1 : 0,\r\n        updatedTrade.session || '',\r\n        updatedTrade.pointA || '',\r\n        updatedTrade.trigger || '',\r\n        updatedTrade.volumeConfirmation || '',\r\n        updatedTrade.entryModel || '',\r\n        updatedTrade.entryTF || '',\r\n        updatedTrade.fta || '',\r\n        updatedTrade.slPosition || '',\r\n        updatedTrade.score || '',\r\n        updatedTrade.category || '',\r\n        JSON.stringify(updatedTrade.topDownAnalysis) || '[]',\r\n        JSON.stringify(updatedTrade.execution) || '{}',\r\n        JSON.stringify(updatedTrade.management) || '{}',\r\n        JSON.stringify(updatedTrade.conclusion) || '{}',\r\n        tradeId,\r\n      ],\r\n      async (err) => {\r\n        if (err) {\r\n          console.error('Error updating trade:', err);\r\n          reject(err);\r\n          return;\r\n        }\r\n        await new Promise((delResolve, delReject) => {\r\n          db.run('DELETE FROM notes WHERE tradeId = ?', [tradeId], (delErr) => {\r\n            if (delErr) delReject(delErr);\r\n            else delResolve();\r\n          });\r\n        });\r\n        if (updatedTrade.notes && updatedTrade.notes.length > 0) {\r\n          for (const note of updatedTrade.notes) {\r\n            await new Promise((noteResolve, noteReject) => {\r\n              db.run(\r\n                'INSERT INTO notes (tradeId, title, text) VALUES (?, ?, ?)',\r\n                [tradeId, note.title, note.text],\r\n                (noteErr) => {\r\n                  if (noteErr) noteReject(noteErr);\r\n                  else noteResolve();\r\n                }\r\n              );\r\n            });\r\n          }\r\n        }\r\n        resolve(true);\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\nipcMain.handle('delete-trade', async (event, tradeId) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run('DELETE FROM trades WHERE id = ?', [tradeId], (err) => {\r\n      if (err) {\r\n        console.error('Error deleting trade:', err);\r\n        reject(err);\r\n        return;\r\n      }\r\n      db.run('DELETE FROM notes WHERE tradeId = ?', [tradeId], (noteErr) => {\r\n        if (noteErr) reject(noteErr);\r\n        else resolve(true);\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\nipcMain.handle('save-file', async (event, file) => {\r\n  await ensureDatabaseInitialized();\r\n  const screenshotsPath = path.join(vaultPath, 'screenshots');\r\n  await fs.mkdir(screenshotsPath, { recursive: true });\r\n  const filePath = path.join(screenshotsPath, `${Date.now()}-${file.name}`);\r\n  await fs.writeFile(filePath, Buffer.from(await file.arrayBuffer()));\r\n  return filePath;\r\n});\r\n\r\nipcMain.handle('save-blob-as-file', async (event, buffer) => {\r\n  await ensureDatabaseInitialized();\r\n  const screenshotsPath = path.join(vaultPath, 'screenshots');\r\n  await fs.mkdir(screenshotsPath, { recursive: true });\r\n  const filePath = path.join(screenshotsPath, `${Date.now()}.png`);\r\n  await fs.writeFile(filePath, Buffer.from(buffer));\r\n  return filePath;\r\n});\r\n\r\nipcMain.handle('save-daily-routine', async (event, routine) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run(\r\n      `INSERT OR REPLACE INTO daily_routines (date, preSession, postSession, emotions, notes) VALUES (?, ?, ?, ?, ?)`,\r\n      [\r\n        routine.date,\r\n        JSON.stringify(routine.preSession || ''),\r\n        JSON.stringify(routine.postSession || ''),\r\n        JSON.stringify(routine.emotions || ''),\r\n        JSON.stringify(routine.notes || ''),\r\n      ],\r\n      (err) => {\r\n        if (err) {\r\n          console.error('Error saving daily routine:', err);\r\n          reject(err);\r\n        } else {\r\n          resolve(true);\r\n        }\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\nipcMain.handle('get-daily-routine', async (event, date) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.get('SELECT * FROM daily_routines WHERE date = ?', [date], (err, row) => {\r\n      if (err) {\r\n        console.error('Error fetching daily routine:', err);\r\n        reject(err);\r\n      } else if (row) {\r\n        resolve({\r\n          date: row.date,\r\n          preSession: JSON.parse(row.preSession || '[]'),\r\n          postSession: JSON.parse(row.postSession || '[]'),\r\n          emotions: JSON.parse(row.emotions || '[]'),\r\n          notes: JSON.parse(row.notes || '[]'),\r\n        });\r\n      } else {\r\n        resolve({\r\n          date,\r\n          preSession: [],\r\n          postSession: [],\r\n          emotions: [],\r\n          notes: [],\r\n        });\r\n      }\r\n    });\r\n  });\r\n});",
  "src/App.jsx": "import React from 'react';\r\nimport { Routes, Route, useLocation, useNavigate } from 'react-router-dom';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport Home from './components/Home.jsx';\r\nimport TradeJournal from './components/TradeJournal.jsx';\r\nimport TradeDetail from './components/TradeDetail.jsx';\r\nimport CreateTrade from './components/CreateTrade.jsx';\r\nimport DailyRoutine from './components/DailyRoutine.jsx';\r\nimport PreSessionJournal from './components/PreSessionJournal.jsx';\r\nimport PostSessionJournal from './components/PostSessionJournal.jsx';\r\nimport Placeholder from './components/Placeholder.jsx';\r\nimport PerformanceAnalysis from './components/PerformanceAnalysis.jsx';\r\nimport WPA from './components/PerformanceAnalysis/WPA.jsx';\r\nimport MPA from './components/PerformanceAnalysis/MPA.jsx';\r\nimport QPA from './components/PerformanceAnalysis/QPA.jsx';\r\nimport YPA from './components/PerformanceAnalysis/YPA.jsx';\r\nimport LearningSection from './components/LearningSection.jsx'; // Додаємо імпорт LearningSection\r\nimport Strategy from './components/LearningSection/Strategy.jsx';\r\nimport TradingPsychology from './components/LearningSection/TradingPsychology.jsx';\r\nimport Notes from './components/LearningSection/Notes.jsx';\r\nimport Statistics from './components/Statistics.jsx';\r\nimport RiskManagement from './components/RiskManagement.jsx';\r\nimport ReportingSystem from './components/ReportingSystem.jsx';\r\nimport Settings from './components/Settings.jsx';\r\n\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body, html {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: #1a1a1a;\r\n    overflow-x: hidden;\r\n  }\r\n  ::-webkit-scrollbar {\r\n    width: 6px;\r\n  }\r\n  ::-webkit-scrollbar-track {\r\n    background: transparent;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background: #7425C9;\r\n    border-radius: 3px;\r\n  }\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: #5e2ca5;\r\n  }\r\n`;\r\n\r\nconst AppContainer = styled.div`\r\n  text-align: center;\r\n  position: relative;\r\n  background-color: #1a1a1a;\r\n  color: #fff;\r\n  margin: 0;\r\n  padding: 20px;\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  overflow-x: hidden;\r\n`;\r\n\r\nconst NavigationButtons = styled.div`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  &.hidden {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst NavButton = styled.button`\r\n  background-color: #5e2ca5;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 6px 10px;\r\n  margin: 0;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 38px;\r\n  height: 38px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: transform 0.2s ease, background-color 0.2s ease;\r\n  &.back {\r\n    border-right: 2px solid #4a1a8d;\r\n  }\r\n  &.forward {\r\n    margin-left: '-2px';\r\n  }\r\n  &:hover {\r\n    background-color: #4a1a8d;\r\n    transform: scale(1.1);\r\n  }\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n  &:before {\r\n    font-size: 20px;\r\n  }\r\n  &.back::before {\r\n    content: \"\\\\2190\";\r\n  }\r\n  &.forward::before {\r\n    content: \"\\\\2192\";\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const isHome = location.pathname === '/';\r\n  const navigate = useNavigate();\r\n\r\n  const handleBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  const handleForward = () => {\r\n    navigate(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <AppContainer>\r\n        {!isHome && <h2 style={{ color: '#5e2ca5' }}>{getSectionTitle(location.pathname)}</h2>}\r\n        <NavigationButtons className={isHome ? 'hidden' : ''}>\r\n          <NavButton onClick={handleBack} className=\"back\" aria-label=\"Back\" />\r\n          <NavButton onClick={handleForward} className=\"forward\" aria-label=\"Forward\" />\r\n        </NavigationButtons>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} />\r\n          <Route path=\"/trade-journal\" element={<TradeJournal />} />\r\n          <Route path=\"/trade/:id\" element={<TradeDetail />} />\r\n          <Route path=\"/create-trade\" element={<CreateTrade />} />\r\n          <Route path=\"/daily-routine\" element={<DailyRoutine />} />\r\n          <Route path=\"/daily-routine/pre-session\" element={<PreSessionJournal />} />\r\n          <Route path=\"/daily-routine/post-session\" element={<PostSessionJournal />} />\r\n          <Route path=\"/learning-section\" element={<LearningSection />} />\r\n          <Route path=\"/learning-section/strategy\" element={<Strategy />} />\r\n          <Route path=\"/learning-section/trading-psychology\" element={<TradingPsychology />} />\r\n          <Route path=\"/learning-section/notes\" element={<Notes />} />\r\n          <Route path=\"/performance-analysis\" element={<PerformanceAnalysis />} />\r\n          <Route path=\"/performance-analysis\" element={<PerformanceAnalysis />} />\r\n          <Route path=\"/performance-analysis/wpa\" element={<WPA />} />\r\n          <Route path=\"/performance-analysis/mpa\" element={<MPA />} />\r\n          <Route path=\"/performance-analysis/qpa\" element={<QPA />} />\r\n          <Route path=\"/performance-analysis/ypa\" element={<YPA />} />\r\n          <Route path=\"/statistics\" element={<Statistics />} />\r\n          <Route path=\"/risk-management\" element={<RiskManagement />} />\r\n          <Route path=\"/reporting-system\" element={<ReportingSystem />} />\r\n          <Route path=\"/settings\" element={<Settings />} />\r\n        </Routes>\r\n      </AppContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction getSectionTitle(path) {\r\n  switch (path) {\r\n    case '/daily-routine/pre-session':\r\n      return 'PRE-SESSION JOURNAL';\r\n    case '/daily-routine/post-session':\r\n      return 'POST-SESSION JOURNAL';\r\n    case '/learning-section/strategy':\r\n        return 'STRATEGY DEVELOPMENT';\r\n    case '/learning-section/trading-psychology':\r\n        return 'TRADING PSYCHOLOGY';\r\n    case '/notes':\r\n        return 'NOTES';\r\n    case '/daily-routine':\r\n      return 'DAILY ROUTINE';\r\n    case '/#daily-routine':\r\n      return 'DAILY ROUTINE';\r\n    case '/performance-analysis':\r\n      return 'PERFORMANCE ANALYSIS';\r\n    case '/statistics':\r\n      return 'STATISTICS';\r\n    case '/risk-management':\r\n      return 'RISK MANAGEMENT';\r\n    case '/learning-section':\r\n      return 'LEARNING SECTION'; // Оновлюємо для LearningSection\r\n    case '/reporting-system':\r\n      return 'REPORTING SYSTEM';\r\n    case '/settings':\r\n      return 'SETTINGS';\r\n    case '/trade/:id':\r\n      return 'TRADE DETAIL';\r\n    case '/create-trade':\r\n      return 'CREATE TRADE';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport default App;",
  "src/components/Home.jsx": "import React from 'react';\r\nimport GalleryItem from './GalleryItem.jsx';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  padding: 20px;\r\n  border-radius: 0 0 10px 10px;\r\n  color: #fff;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px;\r\n  min-height: 6.67vh;\r\n  max-height: 128px;\r\n`;\r\n\r\nconst Greeting = styled.h1`\r\n  margin: 0;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n`;\r\n\r\nconst WorkPhrase = styled.p`\r\n  color: #ff8c00;\r\n  margin-top: 10px;\r\n  font-size: 1.2em;\r\n`;\r\n\r\nconst Gallery = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 30px;\r\n  margin-top: 168px;\r\n  padding: 20px;\r\n  width: 100%;\r\n  overflow-x: hidden; /* Прибираємо горизонтальний скролінг */\r\n`;\r\n\r\nfunction Home() {\r\n  const galleryItems = [\r\n    { title: 'Trading Journal', path: '/trade-journal', description: 'Analyze your future trades in one place using our advanced tools and indicators.' },\r\n    { title: 'Daily Routine', path: '/daily-routine', description: 'Add your daily thoughts and plans.' },\r\n    { title: 'Performance Analysis', path: '/performance-analysis', description: 'Explore and improve your skills.' },\r\n    { title: 'Statistics', path: '/statistics', description: 'All information about your trading.' },\r\n    { title: 'Risk Management', path: '/risk-management', description: 'Save your deposit.' },\r\n    { title: 'Reporting System', path: '/reporting-system', description: 'Get detailed reports.' },\r\n    { title: 'Learning Section', path: '/learning-section', description: 'Learn new skills.' },\r\n    { title: 'Settings', path: '/settings', description: 'Make using app comfortable.' },\r\n  ];\r\n\r\n  const getGreeting = () => {\r\n    const hour = new Date().getHours();\r\n    if (hour >= 4 && hour < 11) return 'Good Morning!';\r\n    if (hour >= 11 && hour < 17) return 'Good Afternoon!';\r\n    return 'Good Evening!';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Greeting>{getGreeting()}</Greeting>\r\n        <WorkPhrase>Let's get to work!</WorkPhrase>\r\n      </Header>\r\n      <Gallery>\r\n        {galleryItems.map((item) => (\r\n          <GalleryItem key={item.path} title={item.title} path={item.path} description={item.description} />\r\n        ))}\r\n      </Gallery>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;",
  "src/index.jsx": "import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './App.jsx';\r\nimport 'styled-components';\r\n\r\nconst root = createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n);",
  "package.json": "{\r\n  \"name\": \"traderworkspace\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"main.js\",\r\n  \"dependencies\": {\r\n    \"boolean\": \"^3.2.0\",\r\n    \"buffer-crc32\": \"^0.2.13\",\r\n    \"cacheable-lookup\": \"^5.0.4\",\r\n    \"cacheable-request\": \"^7.0.4\",\r\n    \"chart.js\": \"^4.4.8\",\r\n    \"clone-response\": \"^1.0.3\",\r\n    \"debug\": \"^4.4.0\",\r\n    \"decompress-response\": \"^6.0.0\",\r\n    \"defer-to-connect\": \"^2.0.1\",\r\n    \"define-data-property\": \"^1.1.4\",\r\n    \"define-properties\": \"^1.2.1\",\r\n    \"detect-node\": \"^2.1.0\",\r\n    \"end-of-stream\": \"^1.4.4\",\r\n    \"env-paths\": \"^2.2.1\",\r\n    \"es-define-property\": \"^1.0.1\",\r\n    \"es-errors\": \"^1.3.0\",\r\n    \"es6-error\": \"^4.1.1\",\r\n    \"escape-string-regexp\": \"^4.0.0\",\r\n    \"extract-zip\": \"^2.0.1\",\r\n    \"fd-slicer\": \"^1.1.0\",\r\n    \"fs-extra\": \"^8.1.0\",\r\n    \"get-stream\": \"^5.2.0\",\r\n    \"global-agent\": \"^3.0.0\",\r\n    \"globalthis\": \"^1.0.4\",\r\n    \"gopd\": \"^1.2.0\",\r\n    \"got\": \"^11.8.6\",\r\n    \"graceful-fs\": \"^4.2.11\",\r\n    \"has-property-descriptors\": \"^1.0.2\",\r\n    \"http-cache-semantics\": \"^4.1.1\",\r\n    \"http2-wrapper\": \"^1.0.3\",\r\n    \"json-buffer\": \"^3.0.1\",\r\n    \"json-stringify-safe\": \"^5.0.1\",\r\n    \"jsonfile\": \"^4.0.0\",\r\n    \"keyv\": \"^4.5.4\",\r\n    \"lowercase-keys\": \"^2.0.0\",\r\n    \"matcher\": \"^3.0.0\",\r\n    \"mimic-response\": \"^1.0.1\",\r\n    \"ms\": \"^2.1.3\",\r\n    \"normalize-url\": \"^6.1.0\",\r\n    \"object-keys\": \"^1.1.1\",\r\n    \"once\": \"^1.4.0\",\r\n    \"p-cancelable\": \"^2.1.1\",\r\n    \"pend\": \"^1.2.0\",\r\n    \"progress\": \"^2.0.3\",\r\n    \"pump\": \"^3.0.2\",\r\n    \"quick-lru\": \"^5.1.1\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-chartjs-2\": \"^5.3.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-router-dom\": \"^7.2.0\",\r\n    \"react-table\": \"^7.8.0\",\r\n    \"resolve-alpn\": \"^1.2.1\",\r\n    \"responselike\": \"^2.0.1\",\r\n    \"roarr\": \"^2.15.4\",\r\n    \"semver\": \"^6.3.1\",\r\n    \"semver-compare\": \"^1.0.0\",\r\n    \"serialize-error\": \"^7.0.1\",\r\n    \"sprintf-js\": \"^1.1.3\",\r\n    \"sqlite\": \"^5.1.1\",\r\n    \"sqlite3\": \"^5.1.7\",\r\n    \"styled-components\": \"^6.1.15\",\r\n    \"sumchecker\": \"^3.0.1\",\r\n    \"type-fest\": \"^0.13.1\",\r\n    \"undici-types\": \"^6.19.8\",\r\n    \"universalify\": \"^0.1.2\",\r\n    \"wrappy\": \"^1.0.2\",\r\n    \"yauzl\": \"^2.10.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.26.9\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.18.6\",\r\n    \"@babel/plugin-transform-runtime\": \"^7.26.9\",\r\n    \"@babel/preset-env\": \"^7.26.9\",\r\n    \"@babel/preset-react\": \"^7.26.3\",\r\n    \"babel-loader\": \"^9.2.1\",\r\n    \"babel-plugin-styled-components\": \"^2.1.4\",\r\n    \"css-loader\": \"^7.1.2\",\r\n    \"electron\": \"^34.2.0\",\r\n    \"electron-rebuild\": \"^3.2.9\",\r\n    \"file-loader\": \"^6.2.0\",\r\n    \"style-loader\": \"^4.0.0\",\r\n    \"webpack\": \"^5.98.0\",\r\n    \"webpack-cli\": \"^6.0.1\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"start\": \"electron .\",\r\n    \"build\": \"webpack --mode production\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"description\": \"\"\r\n}\r\n",
  "src/components/DailyRoutine.jsx": "import React from 'react';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Добавляем глобальные стили для скрытия скролла\r\nconst GlobalStyle = createGlobalStyle`\r\n  html, body {\r\n    margin: 0;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    height: 100%;\r\n    scrollbar-width: none;\r\n    -ms-overflow-style: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DailyRoutineContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  background: #1a1a1a;\r\n  overflow: hidden;\r\n  scrollbar-width: none;\r\n  -ms-overflow-style: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  padding: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px;\r\n  min-height: 6.67vh;\r\n  max-height: 128px;\r\n`;\r\n\r\nconst BackButton = styled(Link)`\r\n  background: rgba(0, 0, 0, 0.2);\r\n  border: none;\r\n  padding: 0;\r\n  width: 200px;\r\n  height: 100%;\r\n  border-radius: 0;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  opacity: 0;\r\n  transition: all 0.3s ease;\r\n  text-decoration: none;\r\n  &:hover {\r\n    opacity: 1;\r\n    transform: scale(1.1);\r\n  }\r\n  &:active {\r\n    transform: scale(0.98);\r\n  }\r\n  &:before {\r\n    content: \"Back\";\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 1.2em;\r\n    color: rgba(255, 255, 255, 0);\r\n    transition: color 0.3s ease;\r\n  }\r\n  &:hover:before {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0 auto;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 1;\r\n`;\r\n\r\nconst RoutineContent = styled.div`\r\n  position: fixed;\r\n  top: 128px;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n  padding: 20px;\r\n  scrollbar-width: none;\r\n  -ms-overflow-style: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst TabsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 50px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 800px;\r\n  max-width: 95%;\r\n  height: 100%;\r\n  max-height: calc(100vh - 168px);\r\n  scrollbar-width: none;\r\n  -ms-overflow-style: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst TabButton = styled(Link)`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  color: #fff;\r\n  border: none;\r\n  padding: 40px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n  font-size: 1.8em;\r\n  width: 100%;\r\n  height: 200px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-decoration: none;\r\n  box-sizing: border-box;\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    opacity: 0.9;\r\n  }\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nfunction DailyRoutine() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <DailyRoutineContainer>\r\n        <Header>\r\n          <BackButton to=\"/\" title=\"Back to Home\" aria-label=\"Back to Home\" />\r\n          <Title>Daily Routine</Title>\r\n        </Header>\r\n        <RoutineContent>\r\n          <TabsContainer>\r\n            <TabButton to=\"/daily-routine/pre-session\">Pre-Session Journal</TabButton>\r\n            <TabButton to=\"/daily-routine/post-session\">Post-Session Journal</TabButton>\r\n          </TabsContainer>\r\n        </RoutineContent>\r\n      </DailyRoutineContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DailyRoutine;",
  "src/components/PreSessionJournal.jsx": "import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport EditIcon from '../assets/icons/edit-icon.svg';\r\nimport DeleteIcon from '../assets/icons/delete-icon.svg';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html, body {\r\n    margin: 0;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    height: 100%;\r\n    scrollbar-width: none;\r\n    -ms-overflow-style: none;\r\n    &::-webkit-scrollbar {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DailyRoutineContainer = styled.div`\r\n  max-width: 1820px;\r\n  margin: 0 auto;\r\n  background-color: #1a1a1a;\r\n  padding: 20px;\r\n  position: relative;\r\n  min-height: 100vh;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  scrollbar-width: none;\r\n  -ms-overflow-style: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  padding: 20px 0;\r\n  border-radius: 10px 10px 0 0;\r\n  color: #fff;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px;\r\n  min-height: 6.67vh;\r\n  max-height: 128px;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst BackButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: none;\r\n  padding: 0;\r\n  width: 200px;\r\n  height: 100%;\r\n  border-radius: 0;\r\n  cursor: pointer;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  opacity: 0;\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.98);\r\n  }\r\n\r\n  &:before {\r\n    content: 'Back';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 1.2em;\r\n    color: rgba(255, 255, 255, 0);\r\n    transition: color 0.3s ease;\r\n  }\r\n\r\n  &:hover:before {\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  margin: 0 auto;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n  text-align: center;\r\n  z-index: 1;\r\n`;\r\n\r\nconst RoutineContent = styled.div`\r\n  margin-top: 148px;\r\n  padding-top: 20px;\r\n  position: relative;\r\n  min-height: calc(100vh - 168px);\r\n  width: 100%;\r\n  overflow-y: visible;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  z-index: 999;\r\n  min-height: 50px;\r\n  flex-direction: row;\r\n  width: 100%;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  background: ${props => props.primary ? 'conic-gradient(from 45deg, #7425C9, #B886EE)' : '#5C9DF5'};\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  height: 40px;\r\n  width: ${props => props.primary ? '240px' : 'auto'};\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    opacity: 0.9;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst ButtonsContainer = styled.div`\r\n  display: flex;\r\n  gap: 5px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  opacity: 1;\r\n`;\r\n\r\nconst IconButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: none;\r\n  cursor: pointer;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n  padding: 5px;\r\n  \r\n  &:hover {\r\n    transform: scale(1.1);\r\n    opacity: 0.9;\r\n  }\r\n\r\n  img {\r\n    width: 14px;\r\n    height: 14px;\r\n    filter: brightness(0) invert(1);\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n    &:hover {\r\n      transform: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Table = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  background-color: #2e2e2e;\r\n  border: 2px solid #5e2ca5;\r\n`;\r\n\r\nconst Th = styled.th`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border: 1px solid #5e2ca5;\r\n  padding: 12px;\r\n  text-align: left;\r\n  color: #fff;\r\n  font-weight: bold;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst Td = styled.td`\r\n  border: 1px solid #5e2ca5;\r\n  padding: 10px;\r\n  text-align: left;\r\n  color: #fff;\r\n  background-color: #2e2e2e;\r\n  position: relative;\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n  &:nth-child(even) {\r\n    background-color: #2e2e2e;\r\n  }\r\n  &:nth-child(odd) {\r\n    background-color: #3e3e3e;\r\n  }\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  padding: 8px;\r\n  background: #3e3e3e;\r\n  border: 1px solid #5e2ca5;\r\n  border-radius: 8px;\r\n  color: #fff;\r\n  font-size: 14px;\r\n\r\n  option {\r\n    background: #3e3e3e;\r\n    color: #fff;\r\n    padding: 8px;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border-color: #B886EE;\r\n  }\r\n`;\r\n\r\nconst Checkbox = styled.input`\r\n  appearance: none;\r\n  width: 20px;\r\n  height: 20px;\r\n  border: 2px solid #5e2ca5;\r\n  border-radius: 4px;\r\n  background-color: #2e2e2e;\r\n  cursor: pointer;\r\n  position: relative;\r\n  margin: 0 auto;\r\n  display: block;\r\n\r\n  &:checked {\r\n    background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n    &:after {\r\n      content: '✓';\r\n      position: absolute;\r\n      color: white;\r\n      font-size: 14px;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n    }\r\n  }\r\n\r\n  &:hover {\r\n    border-color: #B886EE;\r\n  }\r\n`;\r\n\r\nconst Popup = styled.div`\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background: #2e2e2e;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  border: 2px solid #5e2ca5;\r\n  text-align: center;\r\n  z-index: 1000;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\r\n  p {\r\n    color: #fff;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n\r\nconst PopupButton = styled.button`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 20px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  margin: 0 10px;\r\n  transition: transform 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nfunction PreSessionJournal() {\r\n  const navigate = useNavigate();\r\n  const [data, setData] = useState([]);\r\n  const [deletePopup, setDeletePopup] = useState(null);\r\n  const [newEntry, setNewEntry] = useState({\r\n    id: Date.now(),\r\n    date: new Date().toISOString().split('T')[0],\r\n    weekDay: new Date().toLocaleString('en-US', { weekday: 'long' }),\r\n    pair: '',\r\n    narrative: '',\r\n    execution: '',\r\n    outcome: '',\r\n    planOutcome: false,\r\n    addPair: false,\r\n  });\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: 'Actions',\r\n        accessor: 'actions',\r\n        width: 100,\r\n        Cell: ({ row }) => (\r\n          <ButtonsContainer>\r\n            <IconButton\r\n              data-tooltip=\"Edit entry\"\r\n              onClick={() => handleEdit(row.original.id)}\r\n            >\r\n              <img src={EditIcon} alt=\"Edit\" />\r\n            </IconButton>\r\n            <IconButton\r\n              data-tooltip=\"Delete entry\"\r\n              onClick={() => setDeletePopup(row.original.id)}\r\n            >\r\n              <img src={DeleteIcon} alt=\"Delete\" />\r\n            </IconButton>\r\n          </ButtonsContainer>\r\n        ),\r\n      },\r\n      { Header: 'Date', accessor: 'date', width: 120 },\r\n      { Header: 'WeekDay', accessor: 'weekDay', width: 120 },\r\n      {\r\n        Header: 'Pair',\r\n        accessor: 'pair',\r\n        width: 120,\r\n        Cell: ({ value }) => (\r\n          <Select value={value || ''} onChange={(e) => handleChange('pair', e.target.value)}>\r\n            <option value=\"\">Select</option>\r\n            <option value=\"EUR/USD\">EUR/USD</option>\r\n            <option value=\"GBP/USD\">GBP/USD</option>\r\n            <option value=\"USD/JPY\">USD/JPY</option>\r\n          </Select>\r\n        ),\r\n      },\r\n      {\r\n        Header: 'Narrative',\r\n        accessor: 'narrative',\r\n        width: 120,\r\n        Cell: ({ value }) => (\r\n          <Select value={value || ''} onChange={(e) => handleChange('narrative', e.target.value)}>\r\n            <option value=\"\">Select</option>\r\n            <option value=\"Bullish\">Bullish</option>\r\n            <option value=\"Bearish\">Bearish</option>\r\n            <option value=\"Neutral\">Neutral</option>\r\n          </Select>\r\n        ),\r\n      },\r\n      {\r\n        Header: 'Execution',\r\n        accessor: 'execution',\r\n        width: 120,\r\n        Cell: ({ value }) => (\r\n          <Select value={value || ''} onChange={(e) => handleChange('execution', e.target.value)}>\r\n            <option value=\"\">Select</option>\r\n            <option value=\"Manual\">Manual</option>\r\n            <option value=\"Automated\">Automated</option>\r\n          </Select>\r\n        ),\r\n      },\r\n      {\r\n        Header: 'Outcome',\r\n        accessor: 'outcome',\r\n        width: 120,\r\n        Cell: ({ value }) => (\r\n          <Select value={value || ''} onChange={(e) => handleChange('outcome', e.target.value)}>\r\n            <option value=\"\">Select</option>\r\n            <option value=\"Profit\">Profit</option>\r\n            <option value=\"Loss\">Loss</option>\r\n            <option value=\"Break Even\">Break Even</option>\r\n          </Select>\r\n        ),\r\n      },\r\n      {\r\n        Header: 'Plan&Outcome',\r\n        accessor: 'planOutcome',\r\n        width: 120,\r\n        Cell: ({ value }) => (\r\n          <Checkbox\r\n            type=\"checkbox\"\r\n            checked={value || false}\r\n            onChange={(e) => handleChange('planOutcome', e.target.checked)}\r\n          />\r\n        ),\r\n      },\r\n      {\r\n        Header: 'Add. Pair',\r\n        accessor: 'addPair',\r\n        width: 120,\r\n        Cell: ({ value }) => (\r\n          <Checkbox\r\n            type=\"checkbox\"\r\n            checked={value || false}\r\n            onChange={(e) => handleChange('addPair', e.target.checked)}\r\n          />\r\n        ),\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const routine = await window.electronAPI.getDailyRoutine(newEntry.date);\r\n        const preSessionData = routine.preSession || [];\r\n        const normalizedData = Array.isArray(preSessionData)\r\n          ? preSessionData.map(item => ({\r\n              id: item.id || Date.now() + Math.random(),\r\n              date: item.date || newEntry.date,\r\n              weekDay: item.weekDay || newEntry.weekDay,\r\n              pair: item.pair || '',\r\n              narrative: item.narrative || '',\r\n              execution: item.execution || '',\r\n              outcome: item.outcome || '',\r\n              planOutcome: item.planOutcome || false,\r\n              addPair: item.addPair || false,\r\n            }))\r\n          : [];\r\n        setData(normalizedData);\r\n      } catch (error) {\r\n        console.error('Error fetching pre-session data:', error);\r\n        setData([]);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [newEntry.date]);\r\n\r\n  const handleChange = (field, value) => {\r\n    setNewEntry(prev => ({\r\n      ...prev,\r\n      [field]: typeof value === 'string' ? value : Boolean(value),\r\n    }));\r\n  };\r\n\r\n  const handleAdd = async () => {\r\n    try {\r\n      const updatedData = [...data, { ...newEntry, id: Date.now() }];\r\n      setData(updatedData);\r\n      await window.electronAPI.saveDailyRoutine({\r\n        date: newEntry.date,\r\n        preSession: updatedData,\r\n        postSession: [],\r\n        emotions: [],\r\n        notes: [],\r\n      });\r\n      setNewEntry({\r\n        id: Date.now(),\r\n        date: new Date().toISOString().split('T')[0],\r\n        weekDay: new Date().toLocaleString('en-US', { weekday: 'long' }),\r\n        pair: '',\r\n        narrative: '',\r\n        execution: '',\r\n        outcome: '',\r\n        planOutcome: false,\r\n        addPair: false,\r\n      });\r\n      alert('Pre-Session entry added successfully!');\r\n    } catch (error) {\r\n      console\r\n      console.error('Error adding pre-session entry:', error);\r\n      alert('Failed to add Pre-Session entry.');\r\n    }\r\n  };\r\n\r\n  const handleEdit = (id) => {\r\n    const entryToEdit = data.find(entry => entry.id === id);\r\n    if (entryToEdit) {\r\n      setNewEntry(entryToEdit);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      const updatedData = data.filter(entry => entry.id !== id);\r\n      setData(updatedData);\r\n      \r\n      await window.electronAPI.saveDailyRoutine({\r\n        date: newEntry.date,\r\n        preSession: updatedData,\r\n        postSession: [],\r\n        emotions: [],\r\n        notes: [],\r\n      });\r\n      \r\n      setDeletePopup(null);\r\n      alert('Entry deleted successfully!');\r\n    } catch (error) {\r\n      console.error('Error deleting entry:', error);\r\n      alert('Failed to delete entry.');\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    navigate('/daily-routine');\r\n  };\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data }, usePagination);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <DailyRoutineContainer>\r\n        <Header>\r\n          <BackButton onClick={handleBack} />\r\n          <Title>Pre-Session Analysis Journal</Title>\r\n        </Header>\r\n        <RoutineContent>\r\n          <ButtonContainer>\r\n            <ActionButton primary onClick={handleAdd}>Add new Pre-Session</ActionButton>\r\n            <div style={{ display: 'flex', gap: '10px' }}>\r\n              <ActionButton>Range</ActionButton>\r\n              <ActionButton>Filter</ActionButton>\r\n            </div>\r\n          </ButtonContainer>\r\n          <Table {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map(column => (\r\n                    <Th {...column.getHeaderProps()} style={{ width: column.width }}>\r\n                      {column.render('Header')}\r\n                    </Th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {rows.length > 0 ? (\r\n                rows.map(row => {\r\n                  prepareRow(row);\r\n                  return (\r\n                    <TableRow {...row.getRowProps()}>\r\n                      {row.cells.map(cell => (\r\n                        <Td {...cell.getCellProps()} style={{ width: cell.column.width }}>\r\n                          {cell.render('Cell')}\r\n                        </Td>\r\n                      ))}\r\n                    </TableRow>\r\n                  );\r\n                })\r\n              ) : (\r\n                <TableRow>\r\n                  <Td colSpan={columns.length}>No data available</Td>\r\n                </TableRow>\r\n              )}\r\n              <TableRow>\r\n                {columns.map(column => (\r\n                  <Td key={column.accessor} style={{ width: column.width }}>\r\n                    {column.accessor === 'actions' ? (\r\n                      <ButtonsContainer>\r\n                        <IconButton disabled>\r\n                          <img src={EditIcon} alt=\"Edit\" />\r\n                        </IconButton>\r\n                        <IconButton disabled>\r\n                          <img src={DeleteIcon} alt=\"Delete\" />\r\n                        </IconButton>\r\n                      </ButtonsContainer>\r\n                    ) : column.accessor === 'date' ? newEntry.date :\r\n                       column.accessor === 'weekDay' ? newEntry.weekDay :\r\n                       column.Cell ? (\r\n                         column.Cell({ value: newEntry[column.accessor] })\r\n                       ) : newEntry[column.accessor] || ''}\r\n                  </Td>\r\n                ))}\r\n              </TableRow>\r\n            </tbody>\r\n          </Table>\r\n        </RoutineContent>\r\n        {deletePopup && (\r\n          <Popup>\r\n            <p>Want to delete?</p>\r\n            <PopupButton onClick={() => handleDelete(deletePopup)}>Yes</PopupButton>\r\n            <PopupButton onClick={() => setDeletePopup(null)}>No</PopupButton>\r\n          </Popup>\r\n        )}\r\n      </DailyRoutineContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PreSessionJournal;"
