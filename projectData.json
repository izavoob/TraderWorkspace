{
  "src/App.jsx": "import React from 'react';\r\nimport { Routes, Route, useLocation, useNavigate } from 'react-router-dom';\r\nimport Home from './components/Home.jsx';\r\nimport TradeJournal from './components/TradeJournal.jsx';\r\nimport TradeDetail from './components/TradeDetail.jsx';\r\nimport Placeholder from './components/Placeholder.jsx';\r\nimport CreateTrade from './components/CreateTrade.jsx';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body, html {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: #1a1a1a;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nconst AppContainer = styled.div`\r\n  text-align: center;\r\n  position: relative;\r\n  background-color: #1a1a1a;\r\n  color: #fff;\r\n  margin: 0;\r\n  padding: 20px;\r\n  min-height: 100vh;\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nconst NavigationButtons = styled.div`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &.hidden {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst NavButton = styled.button`\r\n  background-color: #5e2ca5;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 6px 10px;\r\n  margin: 0;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 38px;\r\n  height: 38px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: transform 0.2s ease, background-color 0.2s ease;\r\n\r\n  &.back {\r\n    border-right: 2px solid #4a1a8d;\r\n  }\r\n\r\n  &.forward {\r\n    margin-left: '-2px';\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #4a1a8d;\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n\r\n  &:before {\r\n    font-size: 20px;\r\n  }\r\n\r\n  &.back::before {\r\n    content: '\\2190';\r\n  }\r\n\r\n  &.forward::before {\r\n    content: '\\2192';\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const isHome = location.pathname === '/';\r\n  const navigate = useNavigate();\r\n\r\n  const handleBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  const handleForward = () => {\r\n    navigate(1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <AppContainer>\r\n        {!isHome && <h2 style={{ color: '#5e2ca5' }}>{getSectionTitle(location.pathname)}</h2>}\r\n        <NavigationButtons className={isHome ? 'hidden' : ''}>\r\n          <NavButton onClick={handleBack} className=\"back\" aria-label=\"Back\" />\r\n          <NavButton onClick={handleForward} className=\"forward\" aria-label=\"Forward\" />\r\n        </NavigationButtons>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} />\r\n          <Route path=\"/trade-journal\" element={<TradeJournal />} />\r\n          <Route path=\"/trade/:id\" element={<TradeDetail />} />\r\n          <Route path=\"/create-trade\" element={<CreateTrade />} />\r\n          <Route path=\"/daily-routine\" element={<Placeholder title=\"Daily Routine\" />} />\r\n          <Route path=\"/performance-analysis\" element={<Placeholder title=\"Performance Analysis\" />} />\r\n          <Route path=\"/statistics\" element={<Placeholder title=\"Statistics\" />} />\r\n          <Route path=\"/risk-management\" element={<Placeholder title=\"Risk Management\" />} />\r\n          <Route path=\"/learning-section\" element={<Placeholder title=\"Learning Section\" />} />\r\n          <Route path=\"/reporting-system\" element={<Placeholder title=\"Reporting System\" />} />\r\n          <Route path=\"/settings\" element={<Placeholder title=\"Settings\" />} />\r\n        </Routes>\r\n      </AppContainer>\r\n    </>\r\n  );\r\n}\r\n\r\n// Функція для отримання назви секції (залишив для зворотної сумісності)\r\nfunction getSectionTitle(path) {\r\n  switch (path) {\r\n    case '/trade-journal':\r\n      return 'TRADING JOURNAL';\r\n    case '/daily-routine':\r\n      return 'DAILY ROUTINE';\r\n    case '/performance-analysis':\r\n      return 'PERFORMANCE ANALYSIS';\r\n    case '/statistics':\r\n      return 'STATISTICS';\r\n    case '/risk-management':\r\n      return 'RISK MANAGEMENT';\r\n    case '/learning-section':\r\n      return 'LEARNING SECTION';\r\n    case '/reporting-system':\r\n      return 'REPORTING SYSTEM';\r\n    case '/settings':\r\n      return 'SETTINGS';\r\n    case '/trade/:id':\r\n      return 'TRADE DETAIL';\r\n    case '/create-trade':\r\n      return 'CREATE TRADE';\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n\r\nexport default App;",
  "src/components/CreateTrade.jsx": "import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CreateTradeContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 20px auto;\r\n  min-height: 100vh; /* Розтягуємо фон на всю висоту */\r\n  background-color: #1a1a1a; /* Темний фон */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n`;\r\n\r\nconst CreateTradeTitle = styled.h2`\r\n  color: #5e2ca5;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nfunction CreateTrade() {\r\n  return (\r\n    <CreateTradeContainer>\r\n      <CreateTradeTitle>Create Trade (Coming soon)</CreateTradeTitle>\r\n      <p>This is a placeholder for the create trade page.</p>\r\n    </CreateTradeContainer>\r\n  );\r\n}\r\n\r\nexport default CreateTrade;",
  "src/components/GalleryItem.jsx": "import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst GalleryItemStyled = styled(Link)`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  border-radius: 15px;\r\n  height: 150px;\r\n  width: 100%; /* Адаптивна ширина для сітки */\r\n  max-width: 250px; /* Обмеження максимальної ширини для великих екранів */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center; /* Центрування по висоті */\r\n  align-items: center; /* Центрування по ширині */\r\n  text-decoration: none;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  transition: transform 0.2s ease, opacity 0.2s ease;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n    opacity: 0.9;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst ItemTitle = styled.h3`\r\n  margin: 0;\r\n  font-size: 1.5em;\r\n`;\r\n\r\nconst ItemDescription = styled.p`\r\n  margin: 10px 0 0;\r\n  font-size: 0.9em;\r\n  color: #e0e0e0;\r\n`;\r\n\r\nfunction GalleryItem({ title, path, description }) {\r\n  return (\r\n    <GalleryItemStyled to={path}>\r\n      <ItemTitle>{title}</ItemTitle>\r\n      <ItemDescription>{description}</ItemDescription>\r\n    </GalleryItemStyled>\r\n  );\r\n}\r\n\r\nexport default GalleryItem;",
  "src/components/Placeholder.jsx": "import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PlaceholderContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 20px auto;\r\n  min-height: 100vh; /* Розтягуємо фон на всю висоту */\r\n  background-color: #1a1a1a; /* Темний фон */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n`;\r\n\r\nconst PlaceholderTitle = styled.h2`\r\n  color: #5e2ca5;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nfunction Placeholder({ title }) {\r\n  return (\r\n    <PlaceholderContainer>\r\n      <PlaceholderTitle>{title}</PlaceholderTitle>\r\n      <p>Coming soon</p>\r\n    </PlaceholderContainer>\r\n  );\r\n}\r\n\r\nexport default Placeholder;",
  "src/components/TradeDetail.jsx": "import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TradeDetailContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 20px auto;\r\n  min-height: 100vh; /* Розтягуємо фон на всю висоту */\r\n  background-color: #1a1a1a; /* Темний фон */\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n`;\r\n\r\nconst TradeDetailTitle = styled.h2`\r\n  color: #5e2ca5;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nfunction TradeDetail() {\r\n  return (\r\n    <TradeDetailContainer>\r\n      <TradeDetailTitle>Trade Detail (Coming soon)</TradeDetailTitle>\r\n      <p>This is a placeholder for the trade details page.</p>\r\n    </TradeDetailContainer>\r\n  );\r\n}\r\n\r\nexport default TradeDetail;",
  "src/components/TradeJournal.jsx": "import React, { useState, useEffect } from 'react';\r\nimport { useTable, usePagination } from 'react-table'; // Додаємо usePagination для пагінації\r\nimport { Link, useNavigate } from 'react-router-dom'; // Для переходу на сторінку трейду\r\nimport styled from 'styled-components';\r\n\r\nconst TradeJournalContainer = styled.div`\r\n  max-width: 1200px;\r\n  margin: 20px auto;\r\n  min-height: 100vh; /* Розтягуємо фон на всю висоту */\r\n  background-color: #1a1a1a; /* Гарантуємо темний фон */\r\n`;\r\n\r\nconst JournalHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n  align-items: center;\r\n`;\r\n\r\nconst FilterButtons = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n`;\r\n\r\nconst FilterButton = styled.button`\r\n  background-color: #5e2ca5;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.2s ease, transform 0.2s ease;\r\n\r\n  &.active {\r\n    background-color: #4a1a8d;\r\n  }\r\n\r\n  &:hover {\r\n    background-color: #6e3cb5;\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst AddTradeButton = styled.button`\r\n  background-color: #5e2ca5;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.2s ease, transform 0.2s ease;\r\n\r\n  &:hover {\r\n    background-color: #4a1a8d;\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst TradeTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  margin-top: 10px;\r\n  background-color: #2e2e2e;\r\n  border: 2px solid #5e2ca5;\r\n`;\r\n\r\nconst TableHeader = styled.th`\r\n  border: 1px solid #fff;\r\n  padding: 8px;\r\n  text-align: left;\r\n  color: #fff;\r\n  background-color: #3e3e3e;\r\n`;\r\n\r\nconst TableCell = styled.td`\r\n  border: 1px solid #fff;\r\n  padding: 8px;\r\n  text-align: left;\r\n  color: #fff;\r\n`;\r\n\r\nconst TableRow = styled.tr`\r\n  &:nth-child(even) {\r\n    background-color: #2e2e2e;\r\n  }\r\n\r\n  &:nth-child(odd) {\r\n    background-color: #3e3e3e;\r\n  }\r\n`;\r\n\r\nconst TradeEditForm = styled.form`\r\n  background-color: #2e2e2e;\r\n  padding: 15px;\r\n  border-radius: 5px;\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n`;\r\n\r\nconst EditInput = styled.input`\r\n  margin-right: 10px;\r\n  padding: 5px;\r\n  background-color: #3e3e3e;\r\n  color: #fff;\r\n  border: 1px solid #5e2ca5;\r\n  border-radius: 4px;\r\n  flex: 1;\r\n  min-width: 200px;\r\n`;\r\n\r\nconst EditTextarea = styled.textarea`\r\n  margin-right: 10px;\r\n  padding: 5px;\r\n  background-color: #3e3e3e;\r\n  color: #fff;\r\n  border: 1px solid #5e2ca5;\r\n  border-radius: 4px;\r\n  flex: 1;\r\n  min-width: 200px;\r\n  min-height: 80px;\r\n  resize: vertical;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  background-color: #5e2ca5;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-right: 10px;\r\n  transition: background-color 0.2s ease, transform 0.2s ease;\r\n\r\n  &:hover {\r\n    background-color: #4a1a8d;\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst DeleteButton = styled(ActionButton)`\r\n  background-color: #e74c3c;\r\n\r\n  &:hover {\r\n    background-color: #c0392b;\r\n  }\r\n`;\r\n\r\nfunction TradeJournal() {\r\n  const [trades, setTrades] = useState([]);\r\n  const [filter, setFilter] = useState('week'); // За замовчуванням — трейди цього тижня\r\n  const [editingTradeId, setEditingTradeId] = useState(null); // ID трейду, який редагуємо\r\n  const [editedTrade, setEditedTrade] = useState({\r\n    asset: '',\r\n    entryPrice: '',\r\n    exitPrice: '',\r\n    profitLoss: '',\r\n    notes: '',\r\n    tradeName: '',\r\n    account: '',\r\n    pair: '',\r\n    session: '',\r\n    direction: '',\r\n    result: '',\r\n    positionSize: '',\r\n    gainedPoints: '',\r\n    tradeClass: '',\r\n  });\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const loadTrades = async () => {\r\n      try {\r\n        const loadedTrades = await window.electronAPI.getTrades();\r\n        setTrades(loadedTrades || []);\r\n      } catch (error) {\r\n        console.error('Error loading trades:', error);\r\n        setTrades([]); // Установлюємо порожній масив навіть при помилці\r\n      }\r\n    };\r\n    loadTrades();\r\n  }, []);\r\n\r\n  // Фільтрація трейдів\r\n  const filteredTrades = React.useMemo(() => {\r\n    const now = new Date();\r\n    return trades.filter((trade) => {\r\n      const tradeDate = new Date(trade.date);\r\n      if (filter === 'week') {\r\n        const weekStart = new Date(now.setDate(now.getDate() - now.getDay()));\r\n        return tradeDate >= weekStart && tradeDate <= now;\r\n      } else if (filter === 'month') {\r\n        return tradeDate.getMonth() === now.getMonth() && tradeDate.getFullYear() === now.getFullYear();\r\n      } else if (filter === 'all') {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }, [trades, filter]);\r\n\r\n  // Колонки для таблиці\r\n  const columns = React.useMemo(\r\n    () => [\r\n      { Header: 'No.', accessor: (row, i) => i + 1 }, // Порядковий номер\r\n      { Header: 'Date', accessor: 'date' },\r\n      { Header: 'Asset', accessor: 'asset' },\r\n      { Header: 'Account', accessor: 'account' },\r\n      { Header: 'Pair', accessor: 'pair' },\r\n      { Header: 'Session', accessor: 'session' },\r\n      { Header: 'Direction', accessor: 'direction' },\r\n      { Header: 'Result', accessor: 'result' },\r\n      { Header: 'Position Size', accessor: 'positionSize' },\r\n      { Header: 'Gained Points', accessor: 'gainedPoints' },\r\n      { Header: 'Trade Class', accessor: 'tradeClass' },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable({ columns, data: filteredTrades }, usePagination);\r\n\r\n  // Обробка кліку на номер трейду для переходу на сторінку\r\n  const handleTradeClick = (tradeId) => {\r\n    navigate(`/trade/${tradeId}`); // Перехід на сторінку трейду\r\n  };\r\n\r\n  // Перехід на сторінку створення трейду\r\n  const handleAddTrade = () => {\r\n    navigate('/create-trade'); // Перехід на сторінку створення трейду\r\n  };\r\n\r\n  // Початок редагування трейду\r\n  const handleEdit = (trade) => {\r\n    setEditingTradeId(trade.id);\r\n    setEditedTrade({\r\n      asset: trade.asset || '',\r\n      entryPrice: trade.entryPrice || '',\r\n      exitPrice: trade.exitPrice || '',\r\n      profitLoss: trade.profitLoss || '',\r\n      notes: trade.notes || '',\r\n      tradeName: trade.tradeName || '',\r\n      account: trade.account || '',\r\n      pair: trade.pair || '',\r\n      session: trade.session || '',\r\n      direction: trade.direction || '',\r\n      result: trade.result || '',\r\n      positionSize: trade.positionSize || '',\r\n      gainedPoints: trade.gainedPoints || '',\r\n      tradeClass: trade.tradeClass || '',\r\n    });\r\n  };\r\n\r\n  // Збереження змін у трейді\r\n  const handleSaveEdit = async (e) => {\r\n    e.preventDefault();\r\n    if (editingTradeId) {\r\n      const updatedTrade = {\r\n        id: editingTradeId,\r\n        date: trades.find((t) => t.id === editingTradeId)?.date || new Date().toISOString().split('T')[0],\r\n        ...editedTrade,\r\n      };\r\n      try {\r\n        await window.electronAPI.updateTrade(editingTradeId, updatedTrade);\r\n        setTrades(trades.map((trade) => (trade.id === editingTradeId ? updatedTrade : trade)));\r\n        setEditingTradeId(null);\r\n        setEditedTrade({\r\n          asset: '',\r\n          entryPrice: '',\r\n          exitPrice: '',\r\n          profitLoss: '',\r\n          notes: '',\r\n          tradeName: '',\r\n          account: '',\r\n          pair: '',\r\n          session: '',\r\n          direction: '',\r\n          result: '',\r\n          positionSize: '',\r\n          gainedPoints: '',\r\n          tradeClass: '',\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating trade:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Скасування редагування\r\n  const handleCancelEdit = () => {\r\n    setEditingTradeId(null);\r\n    setEditedTrade({\r\n      asset: '',\r\n      entryPrice: '',\r\n      exitPrice: '',\r\n      profitLoss: '',\r\n      notes: '',\r\n      tradeName: '',\r\n      account: '',\r\n      pair: '',\r\n      session: '',\r\n      direction: '',\r\n      result: '',\r\n      positionSize: '',\r\n      gainedPoints: '',\r\n      tradeClass: '',\r\n    });\r\n  };\r\n\r\n  // Видалення трейду\r\n  const handleDelete = async (tradeId) => {\r\n    try {\r\n      await window.electronAPI.deleteTrade(tradeId);\r\n      setTrades(trades.filter((trade) => trade.id !== tradeId));\r\n    } catch (error) {\r\n      console.error('Error deleting trade:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TradeJournalContainer>\r\n      <JournalHeader>\r\n        <FilterButtons>\r\n          <FilterButton onClick={() => setFilter('week')} className={filter === 'week' ? 'active' : ''}>\r\n            This Week\r\n          </FilterButton>\r\n          <FilterButton onClick={() => setFilter('month')} className={filter === 'month' ? 'active' : ''}>\r\n            This Month\r\n          </FilterButton>\r\n          <FilterButton onClick={() => setFilter('all')} className={filter === 'all' ? 'active' : ''}>\r\n            All Trades\r\n          </FilterButton>\r\n        </FilterButtons>\r\n        <AddTradeButton onClick={handleAddTrade}>\r\n          Add Trade\r\n        </AddTradeButton>\r\n      </JournalHeader>\r\n      {editingTradeId && (\r\n        <TradeEditForm onSubmit={handleSaveEdit}>\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"asset\"\r\n            value={editedTrade.asset}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, asset: e.target.value })}\r\n            placeholder=\"Asset (e.g., BTC/USD)\"\r\n          />\r\n          <EditInput\r\n            type=\"number\"\r\n            name=\"entryPrice\"\r\n            value={editedTrade.entryPrice}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, entryPrice: e.target.value })}\r\n            placeholder=\"Entry Price\"\r\n          />\r\n          <EditInput\r\n            type=\"number\"\r\n            name=\"exitPrice\"\r\n            value={editedTrade.exitPrice}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, exitPrice: e.target.value })}\r\n            placeholder=\"Exit Price\"\r\n          />\r\n          <EditInput\r\n            type=\"number\"\r\n            name=\"profitLoss\"\r\n            value={editedTrade.profitLoss}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, profitLoss: e.target.value })}\r\n            placeholder=\"Profit/Loss\"\r\n          />\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"tradeName\"\r\n            value={editedTrade.tradeName}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, tradeName: e.target.value })}\r\n            placeholder=\"Trade Name\"\r\n          />\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"account\"\r\n            value={editedTrade.account}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, account: e.target.value })}\r\n            placeholder=\"Account\"\r\n          />\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"pair\"\r\n            value={editedTrade.pair}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, pair: e.target.value })}\r\n            placeholder=\"Pair\"\r\n          />\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"session\"\r\n            value={editedTrade.session}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, session: e.target.value })}\r\n            placeholder=\"Session\"\r\n          />\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"direction\"\r\n            value={editedTrade.direction}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, direction: e.target.value })}\r\n            placeholder=\"Direction\"\r\n          />\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"result\"\r\n            value={editedTrade.result}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, result: e.target.value })}\r\n            placeholder=\"Result\"\r\n          />\r\n          <EditInput\r\n            type=\"number\"\r\n            name=\"positionSize\"\r\n            value={editedTrade.positionSize}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, positionSize: e.target.value })}\r\n            placeholder=\"Position Size\"\r\n          />\r\n          <EditInput\r\n            type=\"number\"\r\n            name=\"gainedPoints\"\r\n            value={editedTrade.gainedPoints}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, gainedPoints: e.target.value })}\r\n            placeholder=\"Gained Points\"\r\n          />\r\n          <EditInput\r\n            type=\"text\"\r\n            name=\"tradeClass\"\r\n            value={editedTrade.tradeClass}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, tradeClass: e.target.value })}\r\n            placeholder=\"Trade Class\"\r\n          />\r\n          <EditTextarea\r\n            name=\"notes\"\r\n            value={editedTrade.notes}\r\n            onChange={(e) => setEditedTrade({ ...editedTrade, notes: e.target.value })}\r\n            placeholder=\"Notes\"\r\n          />\r\n          <ActionButton type=\"submit\">Save Changes</ActionButton>\r\n          <ActionButton type=\"button\" onClick={handleCancelEdit}>\r\n            Cancel\r\n          </ActionButton>\r\n          <DeleteButton type=\"button\" onClick={() => handleDelete(editingTradeId)}>\r\n            Delete\r\n          </DeleteButton>\r\n        </TradeEditForm>\r\n      )}\r\n      <TradeTable {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <TableHeader {...column.getHeaderProps()}>{column.render('Header')}</TableHeader>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.length === 0 ? (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} style={{ textAlign: 'center' }}>\r\n                No trades yet\r\n              </TableCell>\r\n            </TableRow>\r\n          ) : (\r\n            rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <TableRow {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    if (cell.column.Header === 'No.') {\r\n                      return (\r\n                        <TableCell {...cell.getCellProps()}>\r\n                          <Link to={`/trade/${row.original.id}`} style={{ color: '#fff', textDecoration: 'none' }}>\r\n                            {cell.render('Cell')}\r\n                          </Link>\r\n                        </TableCell>\r\n                      );\r\n                    }\r\n                    return <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>;\r\n                  })}\r\n                  <TableCell>\r\n                    <ActionButton onClick={() => handleEdit(row.original)} className=\"edit-button\">\r\n                      Edit\r\n                    </ActionButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })\r\n          )}\r\n        </tbody>\r\n      </TradeTable>\r\n    </TradeJournalContainer>\r\n  );\r\n}\r\n\r\nexport default TradeJournal;",
  "src/index.jsx": "import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './App.jsx'; // Змінено на .jsx\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\n\r\nconst root = createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n);",
  "src/components/Home.jsx": "import React from 'react';\r\nimport GalleryItem from './GalleryItem.jsx';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n  background: conic-gradient(from 45deg, #7425C9, #B886EE);\r\n  padding: 20px;\r\n  border-radius: 0 0 10px 10px; /* Заокруглення тільки нижніх кутів */\r\n  color: #fff;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 1000;\r\n  height: 128px; /* Фіксована висота для екрану 1920x1080 */\r\n  min-height: 6.67vh; /* Адаптивність для менших екранів */\r\n  max-height: 128px; /* Обмеження максимальної висоти */\r\n`;\r\n\r\nconst Greeting = styled.h1`\r\n  margin: 0;\r\n  font-size: 2.5em;\r\n  color: #fff;\r\n`;\r\n\r\nconst WorkPhrase = styled.p`\r\n  color: #ff8c00;\r\n  margin-top: 10px;\r\n  font-size: 1.2em;\r\n`;\r\n\r\nconst Gallery = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, minmax(0, 1fr)); /* 4 елементи в ряд, адаптивно */\r\n  grid-template-rows: repeat(2, auto); /* 2 рядки, автоматична висота */\r\n  gap: 20px;\r\n  margin-top: 168px; /* Зсув вниз, враховуючи висоту Header (128px) + padding 20px */\r\n  padding: 20px;\r\n  max-width: 1200px; /* Обмеження максимальної ширини для великих екранів */\r\n  margin-left: auto;\r\n  margin-right: auto; /* Центрування контейнера */\r\n  justify-content: center; /* Центрування по ширині */\r\n  align-items: center; /* Центрування по висоті */\r\n`;\r\n\r\nfunction Home() {\r\n  const galleryItems = [\r\n    { title: 'Trading Journal', path: '/trade-journal', description: 'Analyze your future trades in one place using our advanced tools and indicators.' },\r\n    { title: 'Daily Routine', path: '/daily-routine', description: 'Add your daily thoughts and plans.' },\r\n    { title: 'Performance Analysis', path: '/performance-analysis', description: 'Explore and improve your skills.' },\r\n    { title: 'Statistics', path: '/statistics', description: 'All information about your trading.' },\r\n    { title: 'Risk Management', path: '/risk-management', description: 'Save your deposit.' },\r\n    { title: 'Reporting System', path: '/reporting-system', description: 'Get detailed reports.' },\r\n    { title: 'Learning Section', path: '/learning-section', description: 'Learn new skills.' },\r\n    { title: 'Settings', path: '/settings', description: 'Make using app comfortable.' },\r\n  ];\r\n\r\n  const getGreeting = () => {\r\n    const hour = new Date().getHours();\r\n    if (hour >= 4 && hour < 11) return 'Good Morning!';\r\n    if (hour >= 11 && hour < 17) return 'Good Afternoon!';\r\n    return 'Good Evening!';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Greeting>{getGreeting()}</Greeting>\r\n        <WorkPhrase>Let's get to work!</WorkPhrase>\r\n      </Header>\r\n      <Gallery>\r\n        {galleryItems.map((item) => (\r\n          <GalleryItem key={item.path} title={item.title} path={item.path} description={item.description} />\r\n        ))}\r\n      </Gallery>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;",
  "index.html": "<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>Trader Workspace</title>\r\n    <meta\r\n      http-equiv=\"Content-Security-Policy\"\r\n      content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.googleapis.com https://fonts.gstatic.com;\"\r\n    />\r\n    <link\r\n      href=\"https://fonts.googleapis.com/css2?family=Noto+Sans:wght@400&display=swap\"\r\n      rel=\"stylesheet\"\r\n    />\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script src=\"./dist/bundle.js\"></script>\r\n  </body>\r\n</html>",
  "main.js": "const { app, BrowserWindow, ipcMain } = require('electron');\r\nconst path = require('path');\r\nconst sqlite3 = require('sqlite3').Database;\r\nconst fs = require('fs').promises;\r\n\r\nlet db = null; // SQLite база даних\r\nlet vaultPath = null; // Шлях до папки, де зберігається база\r\n\r\n// Ініціалізація бази даних\r\nasync function initializeDatabase() {\r\n  if (vaultPath && db) return; // Якщо вже ініціалізовано, не повторюємо\r\n\r\n  vaultPath = path.join(app.getPath('documents'), 'TraderWorkspaceVault');\r\n  const dbPath = path.join(vaultPath, 'trades.db');\r\n\r\n  try {\r\n    await fs.mkdir(vaultPath, { recursive: true });\r\n    db = new sqlite3(dbPath, (err) => {\r\n      if (err) throw new Error(`Database connection failed: ${err.message}`);\r\n      console.log('SQLite database initialized at:', dbPath);\r\n    });\r\n\r\n    // Створюємо таблицю для трейдів, якщо її немає\r\n    db.run(`\r\n      CREATE TABLE IF NOT EXISTS trades (\r\n        id TEXT PRIMARY KEY,\r\n        date TEXT,\r\n        asset TEXT,\r\n        entryPrice REAL,\r\n        exitPrice REAL,\r\n        profitLoss REAL,\r\n        notes TEXT,\r\n        tradeName TEXT,\r\n        account TEXT,\r\n        pair TEXT,\r\n        session TEXT,\r\n        direction TEXT,\r\n        result TEXT,\r\n        positionSize TEXT,\r\n        gainedPoints TEXT,\r\n        tradeClass TEXT\r\n      )\r\n    `, (err) => {\r\n      if (err) throw new Error(`Table creation failed: ${err.message}`);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error initializing database:', error);\r\n    throw new Error('Database initialization failed');\r\n  }\r\n}\r\n\r\nfunction createWindow() {\r\n  const win = new BrowserWindow({\r\n    width: 800,\r\n    height: 600,\r\n    webPreferences: {\r\n      nodeIntegration: false,\r\n      contextIsolation: true,\r\n      preload: path.join(__dirname, 'preload.js'),\r\n    },\r\n  });\r\n\r\n  win.loadFile('index.html');\r\n\r\n  // Ініціалізуємо базу даних асинхронно\r\n  initializeDatabase().catch(console.error);\r\n}\r\n\r\napp.whenReady().then(createWindow);\r\n\r\napp.on('window-all-closed', () => {\r\n  if (db) db.close((err) => {\r\n    if (err) console.error('Error closing database:', err);\r\n    console.log('Database closed');\r\n  }); // Закриваємо базу даних при закритті додатку\r\n  if (process.platform !== 'darwin') app.quit();\r\n});\r\n\r\napp.on('activate', () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) createWindow();\r\n});\r\n\r\n// Перевірка ініціалізації бази перед обробкою запитів\r\nconst ensureDatabaseInitialized = async () => {\r\n  if (!db) {\r\n    await initializeDatabase();\r\n  }\r\n  if (!db) throw new Error('Database not initialized');\r\n};\r\n\r\n// IPC для збереження трейду\r\nipcMain.handle('save-trade', async (event, trade) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run(`\r\n      INSERT OR REPLACE INTO trades (id, date, asset, entryPrice, exitPrice, profitLoss, notes, tradeName, account, pair, session, direction, result, positionSize, gainedPoints, tradeClass)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `, [\r\n      trade.id,\r\n      trade.date,\r\n      trade.asset,\r\n      trade.entryPrice || 0,\r\n      trade.exitPrice || 0,\r\n      trade.profitLoss || 0,\r\n      trade.notes || '',\r\n      trade.tradeName || '',\r\n      trade.account || '',\r\n      trade.pair || '',\r\n      trade.session || '',\r\n      trade.direction || '',\r\n      trade.result || '',\r\n      trade.positionSize || '',\r\n      trade.gainedPoints || '',\r\n      trade.tradeClass || ''\r\n    ], (err) => {\r\n      if (err) reject(err);\r\n      resolve(true);\r\n    });\r\n  });\r\n});\r\n\r\n// IPC для отримання всіх трейдів\r\nipcMain.handle('get-trades', async () => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.all('SELECT * FROM trades', (err, rows) => {\r\n      if (err) reject(err);\r\n      resolve(rows || []);\r\n    });\r\n  });\r\n});\r\n\r\n// IPC для оновлення трейду\r\nipcMain.handle('update-trade', async (event, tradeId, updatedTrade) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run(`\r\n      UPDATE trades SET \r\n        date = ?, asset = ?, entryPrice = ?, exitPrice = ?, profitLoss = ?, notes = ?, \r\n        tradeName = ?, account = ?, pair = ?, session = ?, direction = ?, result = ?, \r\n        positionSize = ?, gainedPoints = ?, tradeClass = ?\r\n      WHERE id = ?\r\n    `, [\r\n      updatedTrade.date || new Date().toISOString().split('T')[0],\r\n      updatedTrade.asset || '',\r\n      updatedTrade.entryPrice || 0,\r\n      updatedTrade.exitPrice || 0,\r\n      updatedTrade.profitLoss || 0,\r\n      updatedTrade.notes || '',\r\n      updatedTrade.tradeName || '',\r\n      updatedTrade.account || '',\r\n      updatedTrade.pair || '',\r\n      updatedTrade.session || '',\r\n      updatedTrade.direction || '',\r\n      updatedTrade.result || '',\r\n      updatedTrade.positionSize || '',\r\n      updatedTrade.gainedPoints || '',\r\n      updatedTrade.tradeClass || '',\r\n      tradeId\r\n    ], (err) => {\r\n      if (err) reject(err);\r\n      resolve(true);\r\n    });\r\n  });\r\n});\r\n\r\n// IPC для видалення трейду\r\nipcMain.handle('delete-trade', async (event, tradeId) => {\r\n  await ensureDatabaseInitialized();\r\n  return new Promise((resolve, reject) => {\r\n    db.run('DELETE FROM trades WHERE id = ?', [tradeId], (err) => {\r\n      if (err) reject(err);\r\n      resolve(true);\r\n    });\r\n  });\r\n});",
  "preload.js": "const { contextBridge, ipcRenderer } = require('electron');\r\n\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n  saveTrade: (trade) => ipcRenderer.invoke('save-trade', trade),\r\n  getTrades: () => ipcRenderer.invoke('get-trades'),\r\n  updateTrade: (tradeId, updatedTrade) => ipcRenderer.invoke('update-trade', tradeId, updatedTrade),\r\n  deleteTrade: (tradeId) => ipcRenderer.invoke('delete-trade', tradeId),\r\n});",
  "webpack.config.js": "const path = require('path');\r\n\r\nmodule.exports = {\r\n  entry: './src/index.jsx',\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'bundle.js',\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(js|jsx)$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-react'],\r\n            plugins: [\r\n              '@babel/plugin-transform-runtime',\r\n              '@babel/plugin-proposal-class-properties',\r\n              'babel-plugin-styled-components',\r\n            ],\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  target: 'electron-renderer',\r\n};",
  "package.json": "{\r\n  \"name\": \"traderworkspace\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"main.js\",\r\n  \"dependencies\": {\r\n    \"boolean\": \"^3.2.0\",\r\n    \"buffer-crc32\": \"^0.2.13\",\r\n    \"cacheable-lookup\": \"^5.0.4\",\r\n    \"cacheable-request\": \"^7.0.4\",\r\n    \"clone-response\": \"^1.0.3\",\r\n    \"debug\": \"^4.4.0\",\r\n    \"decompress-response\": \"^6.0.0\",\r\n    \"defer-to-connect\": \"^2.0.1\",\r\n    \"define-data-property\": \"^1.1.4\",\r\n    \"define-properties\": \"^1.2.1\",\r\n    \"detect-node\": \"^2.1.0\",\r\n    \"end-of-stream\": \"^1.4.4\",\r\n    \"env-paths\": \"^2.2.1\",\r\n    \"es-define-property\": \"^1.0.1\",\r\n    \"es-errors\": \"^1.3.0\",\r\n    \"es6-error\": \"^4.1.1\",\r\n    \"escape-string-regexp\": \"^4.0.0\",\r\n    \"extract-zip\": \"^2.0.1\",\r\n    \"fd-slicer\": \"^1.1.0\",\r\n    \"fs-extra\": \"^8.1.0\",\r\n    \"get-stream\": \"^5.2.0\",\r\n    \"global-agent\": \"^3.0.0\",\r\n    \"globalthis\": \"^1.0.4\",\r\n    \"gopd\": \"^1.2.0\",\r\n    \"got\": \"^11.8.6\",\r\n    \"graceful-fs\": \"^4.2.11\",\r\n    \"has-property-descriptors\": \"^1.0.2\",\r\n    \"http-cache-semantics\": \"^4.1.1\",\r\n    \"http2-wrapper\": \"^1.0.3\",\r\n    \"json-buffer\": \"^3.0.1\",\r\n    \"json-stringify-safe\": \"^5.0.1\",\r\n    \"jsonfile\": \"^4.0.0\",\r\n    \"keyv\": \"^4.5.4\",\r\n    \"lowercase-keys\": \"^2.0.0\",\r\n    \"matcher\": \"^3.0.0\",\r\n    \"mimic-response\": \"^1.0.1\",\r\n    \"ms\": \"^2.1.3\",\r\n    \"normalize-url\": \"^6.1.0\",\r\n    \"object-keys\": \"^1.1.1\",\r\n    \"once\": \"^1.4.0\",\r\n    \"p-cancelable\": \"^2.1.1\",\r\n    \"pend\": \"^1.2.0\",\r\n    \"progress\": \"^2.0.3\",\r\n    \"pump\": \"^3.0.2\",\r\n    \"quick-lru\": \"^5.1.1\",\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"react-router-dom\": \"^7.2.0\",\r\n    \"react-table\": \"^7.8.0\",\r\n    \"resolve-alpn\": \"^1.2.1\",\r\n    \"responselike\": \"^2.0.1\",\r\n    \"roarr\": \"^2.15.4\",\r\n    \"semver\": \"^6.3.1\",\r\n    \"semver-compare\": \"^1.0.0\",\r\n    \"serialize-error\": \"^7.0.1\",\r\n    \"sprintf-js\": \"^1.1.3\",\r\n    \"sqlite3\": \"^5.1.7\",\r\n    \"styled-components\": \"^6.1.15\",\r\n    \"sumchecker\": \"^3.0.1\",\r\n    \"type-fest\": \"^0.13.1\",\r\n    \"undici-types\": \"^6.19.8\",\r\n    \"universalify\": \"^0.1.2\",\r\n    \"wrappy\": \"^1.0.2\",\r\n    \"yauzl\": \"^2.10.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.26.9\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.18.6\",\r\n    \"@babel/plugin-transform-runtime\": \"^7.26.9\",\r\n    \"@babel/preset-env\": \"^7.26.9\",\r\n    \"@babel/preset-react\": \"^7.26.3\",\r\n    \"babel-loader\": \"^9.2.1\",\r\n    \"babel-plugin-styled-components\": \"^2.1.4\",\r\n    \"css-loader\": \"^7.1.2\",\r\n    \"electron\": \"^34.2.0\",\r\n    \"electron-rebuild\": \"^3.2.9\",\r\n    \"style-loader\": \"^4.0.0\",\r\n    \"webpack\": \"^5.98.0\",\r\n    \"webpack-cli\": \"^6.0.1\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"start\": \"electron .\",\r\n    \"build\": \"webpack --mode production\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"description\": \"\"\r\n}\r\n",
  "README.md": "# TraderWorkspace\r\n\r\n## Опис проєкту\r\n\r\n**TraderWorkspace** — це десктопний додаток на основі Electron, розроблений для трейдерів, щоб допомогти їм вести журнал трейдів, відстежувати щоденні рутини, аналізувати продуктивність, управляти ризиками, створювати звіти і вчитися новим стратегіям. Додаток надає зручний інтерфейс із темним дизайном, подібним до Obsidian, із фіолетовими акцентами, і дозволяє локально зберігати дані у базі даних SQLite, забезпечуючи конфіденційність і швидкість, як у текстових файлах Markdown.\r\n\r\n### Ідея програми\r\nTraderWorkspace призначений для трейдерів, які хочуть організувати свої торгові операції, аналізувати історичні дані і покращувати свої стратегії. Основна мета — створити всебічний інструмент для:\r\n- Журналу трейдів (Trade Journal) із можливістю додавання, редагування, видалення і фільтрації трейдів.\r\n- Щоденної рутини (Daily Routine) для планування і відстеження торгових звичок.\r\n- Аналізу продуктивності (Performance Analysis) для оцінки результатів торгів (загальна прибутковість, середній профіт/збиток тощо).\r\n- Статистики (Statistics) із фільтрами (за датою, активом, результатом), категоріями (прибутковість, ризики) і відображенням графіків/діаграм (наприклад, через Chart.js або D3.js).\r\n- Управління ризиками (Risk Management) для оцінки і мінімізації ризиків (аналіз позиційного розміру, волатильності).\r\n- Навчальної секції (Learning Section) для вивчення торгових стратегій із інтерактивними уроками і нотатками.\r\n- Системи звітів (Reporting System) для генерації звітів у форматах PDF або JSON для експорту даних.\r\n- Налаштувань (Settings) для конфігурації додатку (темна/світла тема, вибір папки для даних, синхронізація через Dropbox тощо).\r\n\r\nДодаток інспірований простотою і портативністю Obsidian, але адаптований для трейдерів із фокусом на локальному зберіганні даних і потужному аналізі.\r\n\r\n---\r\n\r\n## Поточний стан реалізації\r\n\r\n### Реалізовано\r\n- **Trade Journal:**\r\n  - Додавання, редагування, видалення і фільтрація трейдів (за тиждень, місяць, усі трейди).\r\n  - Таблиця з інформацією про трейди (дата, актив, рахунок, пара, сесія, напрямок, результат, позиційний розмір, отримані пункти, клас трейду тощо).\r\n  - Темний дизайн із фіолетовими акцентами (#5e2ca5) і анімацією кнопок, реалізований через `styled-components`.\r\n  - Локальне зберігання трейдів у SQLite через бібліотеку `sqlite3` у файлі `trades.db` у папці `Documents/TraderWorkspaceVault`.\r\n\r\n- **Основний інтерфейс (Home):**\r\n  - Головне меню з галереєю кнопок для переходу до розділів (Trade Journal, Daily Routine, Performance Analysis, Statistics, Risk Management, Learning Section, Reporting System, Settings).\r\n  - Привітання (\"Good Morning!\", \"Good Afternoon!\", \"Good Evening!\") із фразою \"Let's get to work!\".\r\n\r\n- **Технологічний стек:**\r\n  - **Electron 34.2.0** для створення кросплатформового десктопного додатку.\r\n  - **React 18.2.0** для побудови UI-компонентів.\r\n  - **SQLite3** для локального зберігання даних у файлі `trades.db`.\r\n  - **styled-components 6.1.15** для CSS-in-JS стилізації з темним фоном (#1a1a1a) і фіолетовими акцентами (#5e2ca5).\r\n  - **react-router-dom 7.2.0** для навігації між сторінками.\r\n  - **react-table 7.8.0** для створення таблиці трейдів із пагінацією.\r\n  - **Webpack 5.98.0** для компіляції React-коду в `dist/bundle.js`.\r\n  - **Babel** (з `babel-loader`, `@babel/preset-react`, `@babel/plugin-transform-runtime`, `@babel/plugin-proposal-class-properties`, `babel-plugin-styled-components`) для підтримки JSX і сучасного JavaScript.\r\n\r\n- **Інфраструктура:**\r\n  - Локальне збереження даних у файлі `trades.db`, подібно до текстових файлів у Obsidian.\r\n  - Автоматичне створення і збереження даних без діалогових вікон, як у Vault Obsidian.\r\n\r\n### Плани на майбутнє\r\n- **Короткострокові цілі (1-2 місяці):**\r\n  - Реалізувати секцію \"Statistics\" із фільтрами (дата, актив, результат), категоріями (прибутковість, ризики), і графіками (Chart.js або D3.js).\r\n  - Додати базову функціональність \"Daily Routine\" для планування і відстеження торгових звичок.\r\n\r\n- **Середньострокові цілі (3-6 місяців):**\r\n  - Розробити \"Performance Analysis\" для аналізу продуктивності трейдера (загальна прибутковість, середній профіт/збиток, статистика за періодами).\r\n  - Додати \"Risk Management\" із інструментами оцінки ризиків (аналіз позиційного розміру, волатильності, відсотка ризику).\r\n\r\n- **Довгострокові цілі (6+ місяців):**\r\n  - Реалізувати \"Learning Section\" із інтерактивними уроками, нотатками і прикладами стратегій, збереженими у SQLite.\r\n  - Створити \"Reporting System\" для генерації звітів у форматах PDF або JSON із можливістю експорту.\r\n  - Додати підтримку тем (темна/світла) через `styled-components` і `ThemeProvider`, а також синхронізацію через Dropbox у \"Settings\".\r\n\r\n---\r\n\r\n## Вимоги до програмного забезпечення\r\n\r\n### Для розробки\r\n- **Node.js 20.18.2** — використовується для запуску проєкту і менеджменту залежностей через npm. Рекомендується використовувати `nvm-windows` для Windows для легкого перемикання версій:\r\n  - Завантажте `nvm-windows` з [github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows/releases).\r\n  - Встановіть і виконайте:\r\n    ```bash\r\n    nvm install 20.18.2\r\n    nvm use 20.18.2\r\n    \r\n## Примітки для чат-ботів або AI\r\n\r\nЦей проєкт є десктопним додатком для трейдерів на Electron з React, SQLite, і styled-components. Якщо ви чат-бот або AI (наприклад, Grok 3), ви можете:\r\n- Допомагати реалізувати нові функції, такі як \"Statistics\" (з Chart.js для графіків, фільтрами за датою/активом, категоріями).\r\n- Пропонувати код для додавання \"Daily Routine\", \"Performance Analysis\", або інших розділів.\r\n- Надавати поради з оптимізації, тестування (наприклад, із Jest), чи інтеграції нових бібліотек (наприклад, D3.js, pdfkit для звітів).\r\n- Допомагати з налаштуванням Webpack, Babel, або Electron для нових функцій.\r\n- Використовуйте цей контекст для розуміння структури, технологій, і цілей проєкту, щоб відповідати на запити, наприклад:\r\n  - \"Як додати графіки у Statistics, використовуючи Chart.js, у моєму проєкті TraderWorkspace?\"\r\n  - \"Як реалізувати темну/світлу тему через styled-components?\"\r\n  - \"Як додати експорт даних у PDF для Reporting System?\"\r\n\r\nБудь ласка, враховуйте технологічний стек (Electron 34.2.0, React 18.2.0, SQLite3, styled-components 6.1.15, Webpack 5.98.0, Babel), темний дизайн (#1a1a1a фон, #5e2ca5 акценти), локальне зберігання у SQLite (`trades.db` у `Documents/TraderWorkspaceVault`), і структуру проєкту, описану вище.\r\n```",
  ".gitignore": "node_modules/\r\n*.log"
}